{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgerCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","removeItem","info","method","errors","hasOwnPropert","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","stop","err","async","loadingInitial","agent","axiosParams","activitiesEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","conent","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","content","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","styles","borderColor","borderWidth","ActivityListItemAttendees","List","horizontal","map","Popup","trigger","size","circular","bordered","ActivityListItem","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","length","flat","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","RegisterForm","HomePage","isLoggedIn","openModal","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","e","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","initialValues","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","uuid","widths","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","bio","editMode","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","Component","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+ZAOAA,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KACzB,SAAAC,GACE,IAAMC,EAAQC,OAAOC,aAAaC,QAAQ,OAE1C,OADIH,IAAOD,EAAOK,QAAQC,cAAf,iBAAyCL,IAC7CD,KAET,SAAAO,GACE,OAAOC,QAAQC,OAAOF,MAI1Bd,IAAMI,aAAaa,SAASX,SAAIY,GAAW,SAAAJ,GACnB,kBAAlBA,EAAMK,SAAgCL,EAAMG,UAC9CG,IAAMN,MAAM,6CAFoC,MAIRA,EAAMG,SAAxCI,EAJ0C,EAI1CA,OAAQC,EAJkC,EAIlCA,KAAMf,EAJ4B,EAI5BA,OAAQK,EAJoB,EAIpBA,QAuB9B,MAtBe,MAAXS,GACFE,GAAQC,KAAK,aAGF,MAAXH,GAEE,2EADFT,EAAQ,sBAGRH,OAAOC,aAAae,WAAW,OAC/BF,GAAQC,KAAK,KACbJ,IAAMM,KAAK,iDAGA,MAAXL,GACkB,QAAlBd,EAAOoB,QACPL,EAAKM,OAAOC,cAAc,OAE1BN,GAAQC,KAAK,aAEA,MAAXH,GACFD,IAAMN,MAAM,oDAERA,EAAMG,YAGd,I,yJAAMa,GAAe,SAACb,GAAD,OAA6BA,EAASK,MAOrDS,GACC,SAACC,GAAD,OACHhC,IACGiC,IAAID,GACJE,KAAKJ,KAJNC,GAKE,SAACC,EAAaG,GAAd,OACJnC,IACGoC,KAAKJ,EAAKG,GACVD,KAAKJ,KARNC,GASC,SAACC,EAAaG,GAAd,OACHnC,IACGqC,IAAIL,EAAKG,GACTD,KAAKJ,KAZNC,GAaC,SAACC,GAAD,OACHhC,IACGsC,OAAON,GACPE,KAAKJ,KAhBNC,GAiBM,SAACC,EAAaO,GACtB,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBvC,IACJoC,KAAKJ,EAAKQ,EAAU,CACnB5B,QAAS,CAAE,eAAgB,yBAE5BsB,KAAKJ,KA2CG,GAvCI,CACjBa,KAAM,SAACC,GAAD,OACJ5C,IACGiC,IAAI,aAAc,CAAEW,OAAQA,IAC5BV,KAAKJ,KACVe,QAAS,SAACC,GAAD,OAAgBf,GAAA,sBAA4Be,KACrDC,OAAQ,SAACC,GAAD,OAAyBjB,GAAc,cAAeiB,IAC9DC,OAAQ,SAACD,GAAD,OACNjB,GAAA,sBAA4BiB,EAASF,IAAME,IAC7CV,OAAQ,SAACQ,GAAD,OAAgBf,GAAA,sBAA4Be,KACpDI,OAAQ,SAACJ,GAAD,OAAgBf,GAAA,sBAA6Be,EAA7B,WAA0C,KAClEK,SAAU,SAACL,GAAD,OAAgBf,GAAA,sBAA4Be,EAA5B,cA4Bb,GAzBF,CACXM,QAAS,kBAAsBrB,GAAa,UAC5CsB,MAAO,SAACC,GAAD,OACLvB,GAAA,cAA6BuB,IAC/BC,SAAU,SAACD,GAAD,OACRvB,GAAA,iBAAgCuB,KAoBrB,GAjBE,CACfrB,IAAK,SAACuB,GAAD,OACHzB,GAAA,oBAA0ByB,KAC5BC,YAAa,SAACC,GAAD,OACX3B,GAAA,UAA6B2B,IAC/BC,aAAc,SAACb,GAAD,OAAgBf,GAAA,kBAAyBe,EAAzB,YAAuC,KACrEc,YAAa,SAACd,GAAD,OAAgBf,GAAA,kBAAwBe,KACrDe,cAAe,SAACC,GAAD,OACb/B,GAAA,YAA0B+B,IAC5BC,OAAQ,SAACP,GAAD,OACNzB,GAAA,oBAA2ByB,EAA3B,WAA8C,KAChDQ,SAAU,SAACR,GAAD,OAAsBzB,GAAA,oBAA0ByB,EAA1B,aAChCS,eAAgB,SAACT,EAAkBU,GAAnB,OACdnC,GAAA,oBAA0ByB,EAA1B,6BAAuDU,KACzDC,eAAgB,SAACX,EAAkBU,GAAnB,OACdnC,GAAA,oBAA0ByB,EAA1B,iCAA2DU,MC1GlDE,GAAmB,SAACpB,EAAqBM,GAMpD,OALAN,EAASqB,KAAO,IAAIC,KAAKtB,EAASqB,MAClCrB,EAASuB,QAAUvB,EAASwB,UAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAElB,WAAaF,EAAKE,YACpER,EAAS2B,OAAS3B,EAASwB,UAAUC,MACnC,SAAAC,GAAC,OAAIA,EAAElB,WAAaF,EAAKE,UAAYkB,EAAEC,UAElC3B,GAGI4B,GAAiB,SAACtB,GAC3B,MAAO,CACHuB,YAAavB,EAAKuB,YAClBF,QAAQ,EACRnB,SAAUF,EAAKE,SACfsB,MAAOxB,EAAKwB,Q,UClBCC,I,EAqBlBC,IAAWC,I,aAnBZ,WAAYC,GAAuB,IAAD,gCADlCA,eACkC,2sBA4KlCC,YAAc,SAACrC,GACb,OAAO,EAAKsC,iBAAiBnD,IAAIa,IA7KD,kNAChCuC,KAAKH,UAAYA,EAEjBI,aACE,kBAAM,EAAKpB,UAAUqB,UACrB,WACE,EAAKC,KAAO,EACZ,EAAKJ,iBAAiBK,QACtB,EAAKC,oB,kEAiGWC,GACpB,IAAMC,EAAmBD,EAAWE,MAClC,SAACnB,EAAGoB,GAAJ,OAAUpB,EAAEL,KAAK0B,UAAYD,EAAEzB,KAAK0B,aAEtC,OAAOC,OAAOC,QACZL,EAAiBM,QACf,SAACP,EAAY3C,GACX,IAAMqB,EAAOrB,EAASqB,KAAK8B,cAAcC,MAAM,KAAK,GAIpD,OAHAT,EAAWtB,GAAQsB,EAAWtB,GAAX,sBACXsB,EAAWtB,IADA,CACOrB,IACtB,CAACA,GACE2C,IAET,O,kCAtFJ,IAAM/C,EAAS,IAAIyD,gBAUnB,OATAzD,EAAOF,OAAO,QAAS4D,OArCb,IAsCV1D,EAAOF,OAAO,SAAd,UAA2B2C,KAAKG,KAtCtB,EAsC6BH,KAAKG,KAAe,IAC3DH,KAAKnB,UAAUqC,SAAQ,SAACC,EAAOC,GACnB,cAAPA,EACD7D,EAAOF,OAAO+D,EAAKD,EAAML,eAEzBvD,EAAOF,OAAO+D,EAAID,MAGf5D,I,iCAIP,OAAO8D,KAAKC,KAAKtB,KAAKuB,cAlDZ,K,uCAwGV,OAAOvB,KAAKwB,sBACVC,MAAMC,KAAK1B,KAAKD,iBAAiB4B,e,mDAxFpChC,K,yEAA8B,IAAIiC,O,sCAClCjC,K,yEAAwC,Q,4CACxCA,K,yEAA4B,K,wCAC5BA,K,yEAAwB,K,oCACxBA,K,wEAAoB,M,qCACpBA,K,yEAAqB,K,uHACgC,Q,2CACrDA,K,yEAA2B,K,kCAC3BA,K,yEAAkB,K,uCAClBA,K,yEAAuB,IAAIiC,O,0CAE3BC,K,oFAAsB,SAAChD,EAAmBsC,GACzC,EAAKtC,UAAUuB,QACE,QAAdvB,GACD,EAAKA,UAAUiD,IAAIjD,EAAWsC,O,uCAIjCY,K,8GAcAA,K,4GAIAF,K,oFAAiB,SAAC1B,GACjB,EAAKA,KAAOA,M,iDAGb0B,K,oFAA6B,SAACG,GAC7B,EAAKC,eAAgB,IAAIC,MACtBC,QAAQrH,QAAqC,CAC5CsH,mBAAoB,kBAAM,EAAKvC,UAAUwC,YAAYlH,SAEtDmH,iBAAiBC,KAASC,aAC1BC,QAEH,EAAKR,cACFS,QACA7F,MAAK,kBAAM8F,QAAQC,IAAI,EAAKX,cAAeY,UAC3ChG,MAAK,WACJ8F,QAAQC,IAAI,8BACZ,EAAKX,cAAea,OAAO,aAAcd,MAE1Ce,OAAM,SAAAtH,GAAK,OAAIkH,QAAQC,IAAI,kCAAmCnH,MAEjE,EAAKwG,cAAce,GAAG,kBAAkB,SAAAC,GACtCC,aAAY,WACV,EAAKvF,SAAUwF,SAAShH,KAAK8G,SAGjC,EAAKhB,cAAce,GAAG,QAAQ,SAAAlH,GAC5BC,IAAMM,KAAKP,U,+CAId+F,K,oFAA2B,WAC1B,EAAKI,cAAea,OAAO,kBAAmB,EAAKnF,SAAUF,IAC5DZ,MAAK,WACJ,EAAKoF,cAAemB,UAErBvG,MAAK,kBAAM8F,QAAQC,IAAI,yBACvBG,OAAM,SAAAM,GAAG,OAAIV,QAAQC,IAAIS,U,wCAI3BxB,K,oFAAoB,SAAOF,GAAP,SAAAtC,EAAAiE,OAAA,uDACnB3B,EAAOK,WAAa,EAAKrE,SAAUF,GADhB,oBAAA4B,EAAA,MAGX,EAAK4C,cAAea,OAAO,cAAenB,IAH/B,sDAKjBgB,QAAQC,IAAR,MALiB,2D,4CASpBb,K,yHAwBAF,K,oFAAwB,8BAAAxC,EAAAiE,OAAA,uDACvB,EAAKC,gBAAiB,EADC,oBAAAlE,EAAA,MAGYmE,GAAiBlG,KAAK,EAAKmG,cAHvC,OAGfC,EAHe,OAIdpD,EAA6BoD,EAA7BpD,WAAYiB,EAAiBmC,EAAjBnC,cACnB2B,YAAY,sBAAsB,WAChC5C,EAAWY,SAAQ,SAAAvD,GACjBoB,GAAiBpB,EAAU,EAAKkC,UAAU8D,UAAU1F,MACpD,EAAK8B,iBAAiB+B,IAAInE,EAASF,GAAIE,MAEzC,EAAK4D,cAAgBA,EACrB,EAAKgC,gBAAiB,KAXH,gDAcrBL,YAAY,yBAAyB,WACnC,EAAKK,gBAAiB,KAfH,4D,0CAoBxB1B,K,oFAAsB,SAAOpE,GAAP,eAAA4B,EAAAiE,OAAA,qDACjB3F,EAAW,EAAKmC,YAAYrC,IADX,uBAGnB,EAAKE,SAAWA,EAHG,kBAIZiG,YAAKjG,IAJO,cAMnB,EAAK4F,gBAAiB,EANH,qBAAAlE,EAAA,MAQAmE,GAAiBhG,QAAQC,IARzB,eAQjBE,EARiB,OASjBuF,YAAY,oBAAoB,WAC9BnE,GAAiBpB,EAAU,EAAKkC,UAAU8D,UAAU1F,MACpD,EAAKN,SAAWA,EAChB,EAAKoC,iBAAiB+B,IAAInE,EAASF,GAAIE,GACvC,EAAK4F,gBAAiB,KAbP,kBAeV5F,GAfU,kCAiBjBuF,YAAY,sBAAsB,WAChC,EAAKK,gBAAiB,KAExBZ,QAAQC,IAAR,MApBiB,6D,2CAyBtBf,K,oFAAuB,WACtB,EAAKlE,SAAW,S,4CAOjBkE,K,oFAAwB,SAAOlE,GAAP,iBAAA0B,EAAAiE,OAAA,uDACvB,EAAKO,YAAa,EADK,oBAAAxE,EAAA,MAGfmE,GAAiB9F,OAAOC,IAHT,QAIfmG,EAAWvE,GAAe,EAAKM,UAAU8D,UAAU1F,OAChDqB,QAAS,GACdH,EAAY,IACNhD,KAAK2H,GACfnG,EAASwB,UAAYA,EACrBxB,EAASwF,SAAW,GACpBxF,EAAS2B,QAAS,EAClB4D,YAAY,mBAAmB,WAC7B,EAAKnD,iBAAiB+B,IAAInE,EAASF,GAAIE,GACvC,EAAKkG,YAAa,KAEpB3H,GAAQC,KAAR,sBAA4BwB,EAASF,KAfhB,kDAiBrByF,YAAY,yBAAyB,WACnC,EAAKW,YAAa,KAEpB9H,IAAMN,MAAM,2BACZkH,QAAQC,IAAI,KAAMhH,UArBG,6D,0CAyBxBiG,K,oFAAsB,SAAOlE,GAAP,SAAA0B,EAAAiE,OAAA,uDACrB,EAAKO,YAAa,EADG,oBAAAxE,EAAA,MAGbmE,GAAiB5F,OAAOD,IAHX,OAInBuF,YAAY,oBAAoB,WAC9B,EAAKnD,iBAAiB+B,IAAInE,EAASF,GAAIE,GACvC,EAAKA,SAAWA,EAChB,EAAKkG,YAAa,KAEpB3H,GAAQC,KAAR,sBAA4BwB,EAASF,KATlB,gDAWnByF,YAAY,uBAAuB,WACjC,EAAKW,YAAa,KAEpB9H,IAAMN,MAAM,2BACZkH,QAAQC,IAAR,MAfmB,4D,4CAmBtBf,K,oFAAwB,SACvBkC,EACAtG,GAFuB,SAAA4B,EAAAiE,OAAA,uDAIvB,EAAKO,YAAa,EAClB,EAAKG,OAASD,EAAME,cAAcC,KALX,oBAAA7E,EAAA,MAOfmE,GAAiBvG,OAAOQ,IAPT,OAQrByF,YAAY,qBAAqB,WAC/B,EAAKnD,iBAAiB9C,OAAOQ,GAC7B,EAAKoG,YAAa,EAClB,EAAKG,OAAS,MAXK,gDAcrBd,YAAY,yBAAyB,WACnC,EAAKW,YAAa,EAClB,EAAKG,OAAS,MAEhBrB,QAAQC,IAAR,MAlBqB,4D,4CAsBxBf,K,oFAAwB,0BAAAxC,EAAAiE,OAAA,uDACjBQ,EAAWvE,GAAe,EAAKM,UAAU8D,UAAU1F,MACzD,EAAKkG,SAAU,EAFQ,oBAAA9E,EAAA,MAIfmE,GAAiB3F,OAAO,EAAKF,SAAUF,KAJxB,OAKrByF,aAAY,WACN,EAAKvF,WACP,EAAKA,SAASwB,UAAUhD,KAAK2H,GAC7B,EAAKnG,SAASuB,SAAU,EACxB,EAAKa,iBAAiB+B,IAAI,EAAKnE,SAASF,GAAI,EAAKE,UACjD,EAAKwG,SAAU,MAVE,gDAcrBjB,aAAY,WACV,EAAKiB,SAAU,KAEjBpI,IAAMN,MAAM,kCAjBS,4D,8CAqBxBoG,K,oFAA0B,oBAAAxC,EAAAiE,OAAA,uDACzB,EAAKa,SAAU,EADU,oBAAA9E,EAAA,MAGjBmE,GAAiB1F,SAAS,EAAKH,SAAUF,KAHxB,OAIvByF,aAAY,WACN,EAAKvF,WACP,EAAKA,SAASwB,UAAY,EAAKxB,SAASwB,UAAUiF,QAChD,SAAA/E,GAAC,OAAIA,EAAElB,WAAa,EAAK0B,UAAU8D,UAAU1F,KAAME,YAErD,EAAKR,SAASuB,SAAU,EACxB,EAAKa,iBAAiB+B,IAAI,EAAKnE,SAASF,GAAI,EAAKE,UACjD,EAAKwG,SAAU,MAXI,gDAevBjB,aAAY,WACV,EAAKiB,SAAU,KAEjBpI,IAAMN,MAAM,iCAlBW,4D,GC/QR4I,I,aAEnB,WAAYxE,GAAuB,yBADnCA,eACkC,gLAChCG,KAAKH,UAAYA,E,uDAMjB,QAASG,KAAK/B,S,uCAHf0B,K,yEAAgC,Q,sCAEhCoC,K,2GAIAF,K,oFAAe,SAAOF,GAAP,eAAAtC,EAAAiE,OAAA,2EAAAjE,EAAA,MAEOmE,GAAWxF,MAAM2D,IAFxB,OAEN1D,EAFM,OAGZiF,aAAY,WACV,EAAKjF,KAAOA,KAEd,EAAK4B,UAAUwC,YAAYiC,SAASrG,EAAK9C,OACzC,EAAK0E,UAAU0E,WAAWC,aAC1BtI,GAAQC,KAAK,eARD,0H,uCAcf0F,K,oFAAkB,SAAOF,GAAP,eAAAtC,EAAAiE,OAAA,2EAAAjE,EAAA,MAEImE,GAAWtF,SAASyD,IAFxB,OAET1D,EAFS,OAGf,EAAK4B,UAAUwC,YAAYiC,SAASrG,EAAK9C,OACzC,EAAK0E,UAAU0E,WAAWC,aAC1BtI,GAAQC,KAAK,eALE,uH,sCAWlB0F,K,oFAAiB,0BAAAxC,EAAAiE,OAAA,2EAAAjE,EAAA,MAEKmE,GAAWzF,WAFhB,OAERE,EAFQ,OAGdiF,aAAY,WACV,EAAKjF,KAAOA,KAJA,gDAOd0E,QAAQC,IAAR,MAPc,4D,qCAWjBf,K,oFAAgB,WACf,EAAKhC,UAAUwC,YAAYiC,SAAS,MACpC,EAAKrG,KAAO,KACZ/B,GAAQC,KAAK,S,GCtDIsI,I,GAEjB,WAAY5E,GAAsB,IAAD,gCADjCA,eACiC,wJAC7BG,KAAKH,UAAYA,EAEjBI,aACI,kBAAM,EAAK9E,SACX,SAAAA,GACOA,EACCC,OAAOC,aAAaqJ,QAAQ,MAAOvJ,GAEnCC,OAAOC,aAAae,WAAW,W,qCAM9CuD,K,yEAAkCvE,OAAOC,aAAaC,QAAQ,U,yCAC9DqE,K,yEAAuB,K,wCAEvBkC,K,oFAAkB,SAAC1G,GAChBC,OAAOC,aAAaqJ,QAAQ,MAAOvJ,GACnC,EAAKA,MAAQA,M,4CAGhB0G,K,oFAAsB,WAEnB,EAAK8C,WAAY,M,IC3BJC,I,GAMhBjF,IAAWkF,Q,GAJZ,WAAYhF,GAAuB,yBADnCA,eACkC,iHAC9BG,KAAKH,UAAYA,G,iHAGO,CACxBiF,MAAM,EACNhI,KAAM,S,yCAGT+E,K,oFAAmB,SAACkD,GACjB,EAAKC,MAAMF,MAAO,EAClB,EAAKE,MAAMlI,KAAOiI,M,0CAGrBlD,K,oFAAoB,WACjB,EAAKmD,MAAMF,MAAO,EAClB,EAAKE,MAAMlI,KAAO,S,cCfLmI,I,cAEnB,WAAYpF,GAAuB,IAAD,gCADlCA,eACkC,4tBAChCG,KAAKH,UAAYA,EAEjBI,aACI,kBAAM,EAAKiF,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMrG,EAA0B,IAAdqG,EAAkB,YAAc,YAClD,EAAKC,eAAetG,QAEpB,EAAKuG,WAAa,M,0DAgB9B,SAAIpF,KAAKH,UAAU8D,UAAU1F,OAAQ+B,KAAKvB,UACjCuB,KAAKH,UAAU8D,UAAU1F,KAAKE,WAAa6B,KAAKvB,QAAQN,a,4CAXlEwB,K,yEAAsC,Q,8CACtCA,K,yEAA4B,K,8CAC5BA,K,yEAA4B,K,uCAC5BA,K,yEAAqB,K,0CACrBA,K,wEAAoC,M,yCACpCA,K,yEAA+B,K,8CAC/BA,K,wEAA6C,M,iDAC7CA,K,yEAA+B,K,0CAE/BoC,K,8HAQAF,K,oFAA4B,SAAO1D,EAAkBU,GAAzB,eAAAQ,EAAAiE,OAAA,uDAC3B,EAAK+B,mBAAoB,EADE,oBAAAhG,EAAA,MAGAmE,GAAe1E,eAAeX,EAAUU,IAHxC,OAGnByB,EAHmB,OAIzB4C,aAAY,WACV,EAAKoC,eAAiBhF,EACtB,EAAK+E,mBAAoB,KANF,gDASzBtJ,IAAMN,MAAM,8BACZyH,aAAY,WACV,EAAKmC,mBAAoB,KAXF,4D,4CAgB5BxD,K,oFAAsB,SAAC0D,GACpB,EAAKL,UAAYK,M,2CAGpB1D,K,oFAAqB,SAAO1D,GAAP,eAAAkB,EAAAiE,OAAA,uDACpB,EAAKkC,gBAAiB,EADF,oBAAAnG,EAAA,MAGImE,GAAe5G,IAAIuB,IAHvB,OAGZM,EAHY,OAIlByE,aAAY,WACV,EAAKzE,QAAUA,EACf,EAAK+G,gBAAiB,KANN,gDASlBtC,aAAY,WACV,EAAKsC,gBAAiB,KAExB7C,QAAQC,IAAR,MAZkB,4D,2CAgBrBf,K,oFAAqB,SAAO3E,GAAP,eAAAmC,EAAAiE,OAAA,uDACpB,EAAKmC,gBAAiB,EADF,oBAAApG,EAAA,MAGEmE,GAAepF,YAAYlB,IAH7B,OAGZmB,EAHY,OAIlB6E,aAAY,WACN,EAAKzE,UACP,EAAKA,QAAQiH,OAAOvJ,KAAKkC,GACrBA,EAAMsH,QAAU,EAAK9F,UAAU8D,UAAU1F,OAC3C,EAAK4B,UAAU8D,UAAU1F,KAAKwB,MAAQpB,EAAM1B,IAC5C,EAAK8B,QAAQgB,MAAQpB,EAAM1B,MAG/B,EAAK8I,gBAAiB,KAZN,gDAelB9C,QAAQC,IAAR,MACA7G,IAAMN,MAAM,2BACZyH,aAAY,WACV,EAAKuC,gBAAiB,KAlBN,4D,4CAuBrB5D,K,oFAAsB,SAAOxD,GAAP,SAAAgB,EAAAiE,OAAA,uDACrB,EAAKa,SAAU,EADM,oBAAA9E,EAAA,MAGbmE,GAAelF,aAAaD,EAAMZ,KAHrB,OAInByF,aAAY,WACV,EAAKrD,UAAU8D,UAAU1F,KAAMwB,MAAQpB,EAAM1B,IAC7C,EAAK8B,QAASiH,OAAOE,MAAK,SAAAvG,GAAC,OAAIA,EAAEsG,UAASA,QAAS,EACnD,EAAKlH,QAASiH,OAAOE,MAAK,SAAAvG,GAAC,OAAIA,EAAE5B,KAAOY,EAAMZ,MAAKkI,QAAS,EAC5D,EAAKlH,QAASgB,MAAQpB,EAAM1B,IAC5B,EAAKwH,SAAU,KATE,gDAYnBpI,IAAMN,MAAM,iCACZyH,aAAY,WACV,EAAKiB,SAAU,KAdE,4D,2CAmBtBtC,K,oFAAqB,SAAOxD,GAAP,SAAAgB,EAAAiE,OAAA,uDACpB,EAAKa,SAAU,EADK,oBAAA9E,EAAA,MAGZmE,GAAejF,YAAYF,EAAMZ,KAHrB,OAIlByF,aAAY,WACV,EAAKzE,QAASiH,OAAS,EAAKjH,QAASiH,OAAOtB,QAC1C,SAAA/E,GAAC,OAAIA,EAAE5B,KAAOY,EAAMZ,MAEtB,EAAK0G,SAAU,KARC,gDAWlBpI,IAAMN,MAAM,8BACZyH,aAAY,WACV,EAAKiB,SAAU,KAbC,4D,6CAkBrBtC,K,oFAAuB,SAAOpD,GAAP,SAAAY,EAAAiE,OAAA,2EAAAjE,EAAA,MAEdmE,GAAehF,cAAcC,IAFf,OAGpByE,aAAY,WAERzE,EAAQe,cAAgB,EAAKK,UAAU8D,UAAU1F,KAAMuB,cAEvD,EAAKK,UAAU8D,UAAU1F,KAAMuB,YAAcf,EAAQe,aAEvD,EAAKf,QAAL,gBAAoB,EAAKA,QAAzB,GAAsCA,MATpB,+CAYpB1C,IAAMN,MAAM,4BAZQ,2D,sCAgBvBoG,K,oFAAgB,SAAO1D,GAAP,SAAAkB,EAAAiE,OAAA,uDACf,EAAKa,SAAU,EADA,oBAAA9E,EAAA,MAGPmE,GAAe9E,OAAOP,IAHf,OAIb+E,aAAY,WACV,EAAKzE,QAASoH,WAAY,EAC1B,EAAKpH,QAASqH,iBACd,EAAK3B,SAAU,KAPJ,gDAUbpI,IAAMN,MAAM,0BACZyH,aAAY,WACV,EAAKiB,SAAU,KAZJ,4D,wCAiBhBtC,K,oFAAkB,SAAO1D,GAAP,SAAAkB,EAAAiE,OAAA,uDACjB,EAAKa,SAAU,EADE,oBAAA9E,EAAA,MAGTmE,GAAe7E,SAASR,IAHf,OAIf+E,aAAY,WACV,EAAKzE,QAASoH,WAAY,EAC1B,EAAKpH,QAASqH,iBACd,EAAK3B,SAAU,KAPF,gDAUfpI,IAAMN,MAAM,4BACZyH,aAAY,WACV,EAAKiB,SAAU,KAZF,4D,8CAiBlBtC,K,oFAAwB,SAAOhD,GAAP,eAAAQ,EAAAiE,OAAA,uDACvB,EAAKa,SAAU,EADQ,oBAAA9E,EAAA,MAGEmE,GAAe5E,eACpC,EAAKH,QAASN,SACdU,IALmB,OAGfkH,EAHe,OAOrB7C,aAAY,WACR,EAAKkC,WAAaW,EAClB,EAAK5B,SAAU,KATE,gDAYrBpI,IAAMN,MAAM,8BACZyH,aAAY,WACV,EAAKiB,SAAU,KAdI,4D,ICnL3B6B,YAAU,CAAEC,eAAgB,WAErB,IAgBMC,GAAmBC,wBAAc,IAT1C,aAAe,yBANfC,mBAMc,OALdzC,eAKc,OAJdtB,iBAIc,OAHdkC,gBAGc,OAFd8B,kBAEc,EACVrG,KAAKoG,cAAgB,IAAI1G,GAAcM,MACvCA,KAAK2D,UAAY,IAAIU,GAAUrE,MAC/BA,KAAKqC,YAAc,IAAIoC,GAAYzE,MACnCA,KAAKuE,WAAa,IAAIK,GAAW5E,MACjCA,KAAKqG,aAAe,IAAIpB,GAAajF,QCwB9BsG,gBAxCU,WACvB,IAD6B,EACXC,qBAAWL,IACMvC,UAA3B1F,EAFqB,EAErBA,KAAMuI,EAFe,EAEfA,OACd,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAWC,QAAM,EAACC,GAAIC,IAASC,OAAK,EAACC,GAAG,KACtC,yBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,MAD/D,YAIA,kBAACb,EAAA,EAAKI,KAAN,CAAW3C,KAAK,SAAS6C,GAAIC,IAASE,GAAG,gBACzC,kBAACT,EAAA,EAAKI,KAAN,KACE,kBAACU,EAAA,EAAD,CACER,GAAIC,IACJE,GAAG,kBACHM,UAAQ,EACRC,QAAQ,kBAGXxJ,GACC,kBAACwI,EAAA,EAAKI,KAAN,CAAWa,SAAS,SAClB,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,OAAO,QAAQV,IAAKlJ,EAAKwB,OAAS,qBAChD,kBAACqI,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAM/J,EAAKuB,aACvC,kBAACsI,EAAA,EAASrB,KAAV,KACE,kBAACqB,EAAA,EAASjB,KAAV,CACEE,GAAIkB,IACJf,GAAE,mBAAcjJ,EAAKE,UACrB6J,KAAK,aACLE,KAAK,SAEP,kBAACJ,EAAA,EAASjB,KAAV,CAAesB,QAAS3B,EAAQwB,KAAK,SAASE,KAAK,kB,kGC5B7DE,GAAS,CACbC,YAAa,SACbC,YAAa,GA0BAC,GAvBqC,SAAC,GAAmB,IAAjBpJ,EAAgB,EAAhBA,UACrD,OACE,kBAACqJ,GAAA,EAAD,CAAMC,YAAU,GACbtJ,EAAUuJ,KAAI,SAAA5E,GAAQ,OACrB,kBAAC0E,GAAA,EAAK3B,KAAN,CAAWzF,IAAK0C,EAAS3F,UACvB,kBAACwK,GAAA,EAAD,CACE7B,OAAQhD,EAAStE,YACjBoJ,QACE,kBAACjB,EAAA,EAAD,CACEkB,KAAK,OACLC,UAAQ,EACR3B,IAAKrD,EAASrE,OAAS,mBACvBsJ,UAAQ,EACR1B,MAAOvD,EAAS+B,UAAWuC,GAAS,eCnBvCY,GAAsD,SAAC,GAE7D,IADLrL,EACI,EADJA,SAEMsL,EAAOtL,EAASwB,UAAUiF,QAAO,SAAA8E,GAAC,OAAIA,EAAE5J,UAAQ,GACtD,OACE,kBAAC6J,GAAA,EAAQC,MAAT,KACE,kBAACD,GAAA,EAAD,KACE,kBAACtC,GAAA,EAAKuC,MAAN,KACE,kBAACvC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKc,MAAN,CACEkB,KAAK,OACLC,UAAQ,EACR3B,IAAK8B,EAAKxJ,OAAS,mBACnB4H,MAAO,CAAEgC,aAAc,KAEzB,kBAACxC,GAAA,EAAKyC,QAAN,KACE,kBAACzC,GAAA,EAAK0C,OAAN,CAAaxC,GAAIkB,IAAMf,GAAE,sBAAiBvJ,EAASF,KAChDE,EAAS6L,OAEZ,kBAAC3C,GAAA,EAAK4C,YAAN,iBAEE,kBAAC,IAAD,CAAMvC,GAAE,mBAAc+B,EAAK9K,WACvB8K,EAAKzJ,cAGV7B,EAAS2B,QACR,kBAACuH,GAAA,EAAK4C,YAAN,KACE,kBAACC,GAAA,EAAD,CACEC,OAAK,EACLC,MAAM,SACNnC,QAAQ,gCAIb9J,EAASuB,UAAYvB,EAAS2B,QAC7B,kBAACuH,GAAA,EAAK4C,YAAN,KACE,kBAACC,GAAA,EAAD,CACEC,OAAK,EACLC,MAAM,QACNnC,QAAQ,qCAQtB,kBAAC0B,GAAA,EAAD,KACE,kBAACU,GAAA,EAAD,CAAM3F,KAAK,UADb,IACyB4F,aAAOnM,EAASqB,KAAM,UAC7C,kBAAC6K,GAAA,EAAD,CAAM3F,KAAK,WAFb,IAE0BvG,EAASoM,MAFnC,KAE4CpM,EAASqM,MAErD,kBAACb,GAAA,EAAD,CAASc,WAAS,GAChB,kBAAC,GAAD,CAA2B9K,UAAWxB,EAASwB,aAEjD,kBAACgK,GAAA,EAAD,CAASe,UAAQ,GACf,8BAAOvM,EAASwM,aAChB,kBAAC5C,EAAA,EAAD,CACER,GAAIkB,IACJf,GAAE,sBAAiBvJ,EAASF,IAC5B2M,QAAQ,QACR3C,QAAQ,OACRmC,MAAM,YCxCDtD,gBArBgB,WAC7B,IACQ+D,EADU9D,qBAAWL,IACUE,cAA/BiE,iBACR,OACE,kBAAC,WAAD,KACGA,EAAiB3B,KAAI,oCAAE4B,EAAF,KAAShK,EAAT,YACpB,kBAAC,WAAD,CAAUc,IAAKkJ,GACb,kBAACZ,GAAA,EAAD,CAAOb,KAAK,QAAQe,MAAM,QACvBE,aAAOQ,EAAO,iBAEjB,kBAACzD,GAAA,EAAKuC,MAAN,CAAYmB,SAAO,GAChBjK,EAAWoI,KAAI,SAAA/K,GAAQ,OACtB,kBAAC,GAAD,CAAkByD,IAAKzD,EAASF,GAAIE,SAAUA,gB,yCC8B7C2I,gBA3CS,WACtB,IAD4B,EACVC,qBAAWL,IACiBE,cAAtCvH,EAFoB,EAEpBA,UAAW2L,EAFS,EAETA,aACnB,OACE,kBAAC,WAAD,KACE,kBAAC/D,EAAA,EAAD,CAAMgE,UAAQ,EAAC5B,KAAM,QAASxB,MAAO,CAAEqD,MAAO,OAAQC,UAAW,KAC/D,kBAACpB,GAAA,EAAD,CAAQrB,KAAM,SAAU0C,UAAQ,EAAChB,MAAO,OAAQnC,QAAS,YACzD,kBAAChB,EAAA,EAAKI,KAAN,CACEgE,OAA2B,IAAnBhM,EAAUgK,KAClBV,QAAS,kBAAMqC,EAAa,MAAO,SACnCZ,MAAO,OACP1F,KAAM,MACNuD,QAAS,eAEX,kBAAChB,EAAA,EAAKI,KAAN,CACEgE,OAAQhM,EAAUiM,IAAI,WACtB3C,QAAS,kBAAMqC,EAAa,UAAW,SACvCZ,MAAO,OACP1F,KAAM,WACNuD,QAAS,cAEX,kBAAChB,EAAA,EAAKI,KAAN,CACEgE,OAAQhM,EAAUiM,IAAI,UACtB3C,QAAS,kBAAMqC,EAAa,SAAU,SACtCZ,MAAO,OACP1F,KAAM,OACNuD,QAAS,iBAGb,kBAAC8B,GAAA,EAAD,CACErB,KAAM,WACN0C,UAAQ,EACRhB,MAAO,OACPnC,QAAS,gBAEX,kBAAC,YAAD,CACEsD,SAAU,SAAA/L,GAAI,OAAIwL,EAAa,YAAaxL,IAC5CmC,MAAOtC,EAAUjC,IAAI,cAAgB,IAAIqC,W,UCVlC+L,GA/BqB,WAClC,OACE,kBAAC,WAAD,KACE,kBAACC,GAAA,EAAD,CAAaC,OAAK,EAAC7D,MAAO,CAAEsD,UAAW,KACrC,kBAACxB,GAAA,EAAQC,MAAT,KACE,kBAACD,GAAA,EAAD,CAAS9B,MAAO,CAAE8D,UAAW,MAC3B,kBAACF,GAAA,EAAD,KACE,kBAACA,GAAA,EAAY1B,OAAb,CAAoB9J,OAAK,GACvB,kBAACwL,GAAA,EAAYG,KAAb,MACA,kBAACH,GAAA,EAAYG,KAAb,OAEF,kBAACH,GAAA,EAAYI,UAAb,KACE,kBAACJ,GAAA,EAAYG,KAAb,SAIN,kBAACjC,GAAA,EAAD,KACE,kBAAC8B,GAAA,EAAD,KACE,kBAACA,GAAA,EAAYG,KAAb,MACA,kBAACH,GAAA,EAAYG,KAAb,QAGJ,kBAACjC,GAAA,EAAD,CAASc,WAAS,EAAC5C,MAAO,CAAE8D,UAAW,MACvC,kBAAChC,GAAA,EAAD,CAASe,UAAQ,GACf,kBAAC3C,EAAA,EAAD,CAAQ+D,UAAQ,EAAC1B,MAAM,OAAOQ,QAAQ,QAAQ3C,QAAQ,cC8BnDnB,gBA/CqB,WAClC,IADwC,EACtBC,qBAAWL,IAOfE,cALZ/F,EAHsC,EAGtCA,eACAkD,EAJsC,EAItCA,eACAgI,EALsC,EAKtCA,QACApL,EANsC,EAMtCA,KACAqL,EAPsC,EAOtCA,WAPsC,EASFC,oBAAS,GATP,oBASjCC,EATiC,KASpBC,EAToB,KAqBxC,OAJAC,qBAAU,WACRvL,MACC,CAACA,IAGF,kBAACwL,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IACjBnH,GAA2B,IAATpD,EACjB,kBAAC,GAAD,MAEA,kBAAC,KAAD,CACE4L,UAAW,EACXC,SAlBY,WACpBL,GAAe,GACfJ,EAAQpL,EAAO,GACfE,IAAiBxD,MAAK,kBAAM8O,GAAe,OAgBnCM,SAAUP,GAAevL,EAAO,EAAIqL,EACpCU,aAAa,GAEb,kBAAC,GAAD,QAIN,kBAACL,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAAC,GAAD,OAEF,kBAACmB,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACyB,GAAA,EAAD,CAAQtB,OAAQa,S,4BCvBTU,GAnBqB,SAAC,GAM9B,IALLC,EAKI,EALJA,MACA3B,EAII,EAJJA,MACA4B,EAGI,EAHJA,KACAC,EAEI,EAFJA,YAEI,IADJC,KAAQC,EACJ,EADIA,QAAShR,EACb,EADaA,MAEjB,OACE,kBAACiR,GAAA,EAAKC,MAAN,CAAYlR,MAAOgR,KAAahR,EAAO6Q,KAAMA,EAAM5B,MAAOA,GACxD,2CAAW2B,EAAX,CAAkBE,YAAaA,KAC9BE,GAAWhR,GACV,kBAACiO,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OAChBnO,K,4BCKImR,GAhBwB,SAAC,GAAqB,IAAnBnR,EAAkB,EAAlBA,MAAOuM,EAAW,EAAXA,KAC/C,OACE,kBAAC6E,GAAA,EAAD,CAASpR,OAAK,GACZ,kBAACoR,GAAA,EAAQtD,OAAT,KAAiB9N,EAAMqR,YACtBrR,EAAMQ,MAAQ0E,OAAOT,KAAKzE,EAAMQ,KAAKM,QAAQwQ,OAAS,GACnD,kBAACF,GAAA,EAAQrE,KAAT,KACK7H,OAAOgB,OAAOlG,EAAMQ,KAAKM,QAAQyQ,OAAOtE,KAAI,SAACrF,EAAK4J,GAAN,OACzC,kBAACJ,GAAA,EAAQhG,KAAT,CAAczF,IAAK6L,GAAI5J,OAIlC2E,GAAQ,kBAAC6E,GAAA,EAAD,CAASpF,QAASO,MCV3BkF,GAAWC,6BAAkB,CACjCC,MAAOC,sBAAW,SAClBC,SAAUD,sBAAW,cAGVE,GAAY,WACvB,IACQvP,EADUuI,qBAAWL,IACDvC,UAApB3F,MACR,OACE,kBAAC,KAAD,CACEwP,SAAU,SAAC7L,GAAD,OACR3D,EAAM2D,GAAQoB,OAAM,SAAAtH,GAAK,uBACtBgS,KAAahS,OAGlByR,SAAUA,GACVQ,OAAQ,gBACNC,EADM,EACNA,aACA9J,EAFM,EAENA,WACA+J,EAHM,EAGNA,YACAC,EAJM,EAINA,QACAC,EALM,EAKNA,SACAC,EANM,EAMNA,qBANM,OAQN,kBAACrB,GAAA,EAAD,CAAMc,SAAUG,EAAclS,OAAK,GACjC,kBAAC8N,GAAA,EAAD,CACExC,GAAG,KACHU,QAAQ,oBACRmC,MAAM,OACNoE,UAAU,WAEZ,kBAAC,KAAD,CAAO9J,KAAK,QAAQ+J,UAAW7B,GAAWG,YAAY,UACtD,kBAAC,KAAD,CACErI,KAAK,WACL+J,UAAW7B,GACXG,YAAY,WACZD,KAAK,aAENsB,IAAgBG,GACf,kBAAC,GAAD,CACEtS,MAAOmS,EACP5F,KAAK,8BAGT,kBAACT,EAAA,EAAD,CACE+D,SAAWuC,IAAYE,GAAyBD,EAChD3J,QAASN,EACT+F,MAAM,OACNnC,QAAQ,QACRyD,OAAK,SCjDXgC,GAAWC,6BAAkB,CACjChP,SAAUkP,sBAAW,YACrB7N,YAAa6N,sBAAW,gBACxBD,MAAOC,sBAAW,SAClBC,SAAUD,sBAAW,cAGVa,GAAe,WAC1B,IACQhQ,EADUqI,qBAAWL,IACEvC,UAAvBzF,SACR,OACE,kBAAC,KAAD,CACEsP,SAAU,SAAC7L,GAAD,OACRzD,EAASyD,GAAQoB,OAAM,SAAAtH,GAAK,uBACzBgS,KAAahS,OAGlByR,SAAUA,GACVQ,OAAQ,gBACNC,EADM,EACNA,aACA9J,EAFM,EAENA,WACA+J,EAHM,EAGNA,YACAC,EAJM,EAINA,QACAC,EALM,EAKNA,SACAC,EANM,EAMNA,qBANM,OAQN,kBAACrB,GAAA,EAAD,CAAMc,SAAUG,EAAclS,OAAK,GACjC,kBAAC8N,GAAA,EAAD,CACExC,GAAG,KACHU,QAAQ,sBACRmC,MAAM,OACNoE,UAAU,WAEZ,kBAAC,KAAD,CAAO9J,KAAK,WAAW+J,UAAW7B,GAAWG,YAAY,aACzD,kBAAC,KAAD,CACErI,KAAK,cACL+J,UAAW7B,GACXG,YAAY,iBAEd,kBAAC,KAAD,CAAOrI,KAAK,QAAQ+J,UAAW7B,GAAWG,YAAY,UACtD,kBAAC,KAAD,CACErI,KAAK,WACL+J,UAAW7B,GACXG,YAAY,WACZD,KAAK,aAENsB,IAAgBG,GACf,kBAAC,GAAD,CACEtS,MAAOmS,IAGX,kBAACrG,EAAA,EAAD,CACE+D,SAAWuC,IAAYE,GAAyBD,EAChD3J,QAASN,EACT+F,MAAM,OACNnC,QAAQ,WACRyD,OAAK,SC3DJiD,GAAW,WACtB,IAAMhT,EAAQC,OAAOC,aAAaC,QAAQ,OACpCuE,EAAY0G,qBAAWL,IAFD,EAGCrG,EAAU8D,UAA/ByK,EAHoB,EAGpBA,WAAYnQ,EAHQ,EAGRA,KACboQ,EAAaxO,EAAU0E,WAAvB8J,UACP,OACE,kBAAClF,GAAA,EAAD,CAASxC,UAAQ,EAACqH,UAAU,SAASvD,UAAQ,EAAC6D,UAAU,YACtD,kBAAC1H,EAAA,EAAD,CAAWoB,MAAI,GACb,kBAACuB,GAAA,EAAD,CAAQxC,GAAG,KAAKJ,UAAQ,GACtB,kBAACgB,EAAA,EAAD,CACEkB,KAAK,UACL1B,IAAI,mBACJC,IAAI,OACJC,MAAO,CAAEgC,aAAc,MAL3B,YASC+E,GAAcnQ,GAAQ9C,EACrB,kBAAC,WAAD,KACE,kBAACoO,GAAA,EAAD,CACExC,GAAG,KACHJ,UAAQ,EACRc,QAAO,uBAAkBxJ,EAAKuB,eAEhC,kBAAC+H,EAAA,EAAD,CAAQR,GAAIkB,IAAMf,GAAG,cAAc2B,KAAK,OAAOlC,UAAQ,GAAvD,oBAKF,kBAAC,WAAD,KACE,kBAAC4C,GAAA,EAAD,CAAQxC,GAAG,KAAKJ,UAAQ,EAACc,QAAQ,wBACjC,kBAACF,EAAA,EAAD,CAAQY,QAAS,kBAAMkG,EAAU,kBAAC,GAAD,QAAexF,KAAK,OAAOlC,UAAQ,GAApE,SAGA,kBAACY,EAAA,EAAD,CAAQY,QAAS,kBAAMkG,EAAU,kBAAC,GAAD,QAAkBnH,GAAG,YAAY2B,KAAK,OAAOlC,UAAQ,GAAtF,gB,UCTC4H,GAUX,WAAYC,GAA4B,yBATxC/Q,QAAc5B,EASyB,KARvC2N,MAAgB,GAQuB,KAPvCiF,SAAmB,GAOoB,KANvCtE,YAAsB,GAMiB,KALvCnL,UAAcnD,EAKyB,KAJvC6S,UAAc7S,EAIyB,KAHvCmO,KAAe,GAGwB,KAFvCD,MAAgB,GAGRyE,GAAQA,EAAKxP,OACbwP,EAAKE,KAAOF,EAAKxP,MAErB2B,OAAOgO,OAAO3O,KAAMwO,I,UCxCbI,GAAkC,SAAC,GAMzC,IALLvC,EAKI,EALJA,MACA3B,EAII,EAJJA,MACAmE,EAGI,EAHJA,KACAtC,EAEI,EAFJA,YAEI,IADJC,KAAQC,EACJ,EADIA,QAAShR,EACb,EADaA,MAEjB,OACE,kBAACiR,GAAA,EAAKC,MAAN,CAAYlR,MAAOgR,KAAahR,EAAOiP,MAAOA,GAC5C,4CAAUmE,KAAMA,GAAUxC,EAA1B,CAAiCE,YAAaA,KAC7CE,GAAWhR,GACV,kBAACiO,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OAChBnO,K,UCZEqT,GAAgC,SAAC,GAMrC,IALLzC,EAKI,EALJA,MACA3B,EAII,EAJJA,MACAqE,EAGI,EAHJA,QACAxC,EAEI,EAFJA,YAEI,IADJC,KAAQC,EACJ,EADIA,QAAShR,EACb,EADaA,MAEjB,OACI,kBAACiR,GAAA,EAAKC,MAAN,CAAYlR,MAAOgR,KAAahR,EAAOiP,MAAOA,GAC9C,kBAACsE,GAAA,EAAD,CACI7N,MAAOkL,EAAMlL,MACb4J,SAAU,SAACkE,EAAGhT,GAAJ,OAAaoQ,EAAMtB,SAAS9O,EAAKkF,QAC3CoL,YAAeA,EACfwC,QAAWA,IAEdtC,GAAWhR,GACV,kBAACiO,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OAChBnO,KCdAyT,GAA8B,SAAC,GASnC,IARL7C,EAQI,EARJA,MACA3B,EAOI,EAPJA,MAEA6B,GAKI,EANJ9O,GAMI,EALJ8O,aAKI,IAJJvN,YAII,aAHJ0P,YAGI,aAFJlC,KAAQC,EAEJ,EAFIA,QAAShR,EAEb,EAFaA,MACd0T,EACC,0EACJ,OACI,kBAACzC,GAAA,EAAKC,MAAN,CAAYlR,MAAOgR,KAAahR,EAAOiP,MAAOA,GAC9C,kBAAC,kBAAD,eACA6B,YAAeA,EACfpL,MAAOkL,EAAMlL,OAAS,KACtB4J,SAAUsB,EAAMtB,SAChBqE,OAAQ/C,EAAM+C,OACdC,UAAW,SAACJ,GAAD,OAAKA,EAAEK,kBAClBtQ,KAAQA,EACR0P,KAAQA,GACJS,IAEH1C,GAAWhR,GACV,kBAACiO,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OAChBnO,KCjCAgT,GAAW,CACtB,CAAErN,IAAK,SAAU4G,KAAM,SAAU7G,MAAO,UACxC,CAAEC,IAAK,UAAW4G,KAAM,UAAW7G,MAAO,WAC1C,CAAEC,IAAK,OAAQ4G,KAAM,OAAQ7G,MAAO,QACpC,CAAEC,IAAK,OAAQ4G,KAAM,OAAQ7G,MAAO,QACpC,CAAEC,IAAK,QAAS4G,KAAM,QAAS7G,MAAO,SACtC,CAAEC,IAAK,SAAU4G,KAAM,SAAU7G,MAAO,WCepC+L,GAAWC,6BAAkB,CACjC3D,MAAO6D,sBAAW,CAAEvR,QAAS,gCAC7B2S,SAAUpB,sBAAW,YACrBlD,YAAaoF,6BACXlC,sBAAW,eACXmC,gCAAqB,EAArBA,CAAwB,CACtB1T,QAAS,kDAHAyT,GAMbvF,KAAMqD,sBAAW,QACjBtD,MAAOsD,sBAAW,SAClBrO,KAAMqO,sBAAW,QACjBqB,KAAMrB,sBAAW,UAuIJ/G,gBAhImD,SAAC,GAG5D,IAFLmJ,EAEI,EAFJA,MACAvT,EACI,EADJA,QACI,EACcqK,qBAAWL,IAMfE,cAJZsJ,EAHE,EAGFA,eACAC,EAJE,EAIFA,aACA9L,EALE,EAKFA,WACA+L,EANE,EAMFA,aANE,EAS4BnE,mBAAS,IAAI8C,IATzC,oBASG5Q,EATH,KASakS,EATb,OAU0BpE,oBAAS,GAVnC,oBAUGtH,EAVH,KAUY2L,EAVZ,KAYJlE,qBAAU,WACJ6D,EAAMlS,OAAOE,KACfqS,GAAW,GACXF,EAAaH,EAAMlS,OAAOE,IACvBZ,MAAK,SAAAc,GACJkS,EAAY,IAAItB,GAAmB5Q,OAEpCoS,SAAQ,kBAAMD,GAAW,SAE7B,CAACF,EAAcH,EAAMlS,OAAOE,KAiB/B,OACE,kBAACoO,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACvB,GAAA,EAAD,CAASe,UAAQ,GACf,kBAAC,KAAD,CACEgD,SAAUA,GACV8C,cAAerS,EACf6P,SAtBoB,SAAC7L,GAC7B,IAAMsO,ExBhEwB,SAACjR,EAAY0P,GAO7C,IAAMwB,EAAalR,EAAK8B,cAAcC,MAAM,KAAK,GAC3CoP,EAAazB,EAAK5N,cAAcC,MAAM,KAAK,GAEjD,OAAO,IAAI9B,KAAKiR,EAAa,IAAMC,GwBsDbC,CAAmBzO,EAAO3C,KAAM2C,EAAO+M,MACpC/Q,GAAagE,EAA5B3C,KAA4B2C,EAAtB+M,KAF+B,aAET/M,EAFS,kBAI7C,GADAhE,EAASqB,KAAOiR,EACXtS,EAASF,GAOZkS,EAAahS,OAPG,CAChB,IAAI0S,EAAW,gBACV1S,EADU,CAEbF,GAAI6S,kBAENZ,EAAeW,KAcT3C,OAAQ,gBAAGC,EAAH,EAAGA,aAAcE,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAA1B,OACN,kBAACpB,GAAA,EAAD,CAAMc,SAAUG,EAAcxJ,QAASA,GACrC,kBAAC,KAAD,CACED,KAAK,QACLqI,YAAY,QACZpL,MAAOxD,EAAS6L,MAChByE,UAAW7B,KAEb,kBAAC,KAAD,CACElI,KAAK,cACLqI,YAAY,cACZsC,KAAM,EACN1N,MAAOxD,EAASwM,YAChB8D,UAAWW,KAEb,kBAAC,KAAD,CACEX,UAAWa,GACXC,QAASN,GACTvK,KAAK,WACLqI,YAAY,WACZpL,MAAOxD,EAAS8Q,WAElB,kBAAC/B,GAAA,EAAKtD,MAAN,CAAYmH,OAAO,SACjB,kBAAC,KAAD,CACEtC,UAAWiB,GACXhL,KAAK,OACLlF,MAAM,EACNuN,YAAY,OACZpL,MAAOxD,EAASqB,OAElB,kBAAC,KAAD,CACEiP,UAAWiB,GACXhL,KAAK,OACLwK,MAAM,EACNnC,YAAY,OACZpL,MAAOxD,EAAS+Q,QAIpB,kBAAC,KAAD,CACET,UAAW7B,GACXlI,KAAK,OACLqI,YAAY,OACZpL,MAAOxD,EAASqM,OAElB,kBAAC,KAAD,CACEiE,UAAW7B,GACXlI,KAAK,QACLqI,YAAY,QACZpL,MAAOxD,EAASoM,QAElB,kBAACxC,EAAA,EAAD,CACEpD,QAASN,EACTyH,SAAUnH,GAAW0J,GAAWC,EAChC1D,QAAQ,QACR5C,UAAQ,EACR8E,KAAK,SACL7E,QAAQ,WAEV,kBAACF,EAAA,EAAD,CACEY,QACExK,EAASF,GACL,kBAAMvB,EAAQC,KAAR,sBAA4BwB,EAASF,MAC3C,kBAAMvB,EAAQC,KAAK,gBAEzBmP,SAAUnH,EACViG,QAAQ,QACRkC,KAAK,SACL7E,QAAQ,qB,UC1Jb+I,GAAqE,SAAC,GAGxE,IAAD,IAFN7J,gBAEM,SADNc,EACM,EADNA,QAEA,OACI,kBAACgJ,GAAA,EAAD,CAAQ5F,QAAM,EAAClE,SAAUA,GACrB,kBAACwF,GAAA,EAAD,CAAQ1E,QAASA,MCDvBiJ,GAAqB,CACzBtM,OAAQ,mBAGJuM,GAAyB,CAC7BjJ,SAAU,WACVkJ,OAAQ,KACRC,KAAM,KACNnG,MAAO,OACPoG,OAAQ,OACRlH,MAAO,SA8DMtD,gBA3DmD,SAAC,GAE5D,IADL3I,EACI,EADJA,SACI,EACc4I,qBAAWL,IACmCE,cAAxD2K,EAFJ,EAEIA,eAAgBC,EAFpB,EAEoBA,iBAAkB7M,EAFtC,EAEsCA,QACpC8E,EAAOtL,EAASwB,UAAUiF,QAAO,SAAA8E,GAAC,OAAIA,EAAE5J,UAAQ,GACtD,OACE,kBAAC6J,GAAA,EAAQC,MAAT,KACE,kBAACD,GAAA,EAAD,CAASQ,OAAK,EAACiB,SAAS,MAAMvD,MAAO,CAAE4J,QAAS,MAC9C,kBAACtJ,EAAA,EAAD,CACER,IAAG,iCAA4BxJ,EAAS8Q,SAArC,QACHvD,OAAK,EACL7D,MAAOqJ,KAET,kBAACvH,GAAA,EAAD,CAASQ,OAAK,EAACtC,MAAOsJ,IACpB,kBAAC9J,GAAA,EAAKuC,MAAN,KACE,kBAACvC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKyC,QAAN,KACE,kBAACC,GAAA,EAAD,CACEV,KAAK,OACLpB,QAAS9J,EAAS6L,MAClBnC,MAAO,CAAEuC,MAAO,WAElB,2BAAIE,aAAOnM,EAASqB,KAAM,iBAC1B,uCACY,IACV,kBAAC,IAAD,CAAMkI,GAAE,mBAAc+B,EAAK9K,WACzB,gCAAS8K,EAAKzJ,oBAQ5B,kBAAC2J,GAAA,EAAD,CAASe,UAAQ,EAACU,SAAS,UACxBjN,EAAS2B,OACR,kBAACiI,EAAA,EAAD,CACER,GAAIkB,IACJf,GAAE,kBAAavJ,EAASF,IACxBmM,MAAM,SACNQ,QAAQ,SAJV,gBAQEzM,EAASuB,QACX,kBAACqI,EAAA,EAAD,CAAQpD,QAASA,EAASgE,QAAS6I,GAAnC,qBAIA,kBAACzJ,EAAA,EAAD,CAAQpD,QAASA,EAASgE,QAAS4I,EAAgBnH,MAAM,QAAzD,mBClEGsH,GAAuD,SAAC,GAAgB,IAAfvT,EAAc,EAAdA,SAClE,OACI,kBAACwL,GAAA,EAAQC,MAAT,KACM,kBAACD,GAAA,EAAD,CAASyB,SAAS,OAChB,kBAACiB,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACb,GAAA,EAAD,CAAMhB,KAAK,QAAQe,MAAM,OAAO1F,KAAK,UAEvC,kBAAC2H,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,2BAAI/M,EAASwM,gBAInB,kBAAChB,GAAA,EAAD,CAASyB,UAAQ,GACf,kBAACiB,GAAA,EAAD,CAAMsF,cAAc,UAClB,kBAACtF,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACb,GAAA,EAAD,CAAM3F,KAAK,WAAW2E,KAAK,QAAQe,MAAM,UAE3C,kBAACiC,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,8BACGZ,aAAOnM,EAASqB,KAAM,gBADzB,OAC8C8K,aAAOnM,EAASqB,KAAM,cAK1E,kBAACmK,GAAA,EAAD,CAASyB,UAAQ,GACf,kBAACiB,GAAA,EAAD,CAAMsF,cAAc,UAClB,kBAACtF,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACb,GAAA,EAAD,CAAM3F,KAAK,SAAS2E,KAAK,QAAQe,MAAM,UAEzC,kBAACiC,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,8BAAO/M,EAASoM,MAAhB,KAAyBpM,EAASqM,W,oBC0CvC1D,gBArEc,WAC3B,IADiC,EACfC,qBAAWL,IAMfE,cAJZgL,EAH+B,EAG/BA,oBACAC,EAJ+B,EAI/BA,kBACAC,EAL+B,EAK/BA,WACA3T,EAN+B,EAM/BA,SAUF,OAPAiO,qBAAU,WAER,OADAwF,EAAoBzT,EAAUF,IACvB,WACL4T,OAED,CAACD,EAAqBC,EAAmB1T,IAG1C,kBAAC,WAAD,KACE,kBAACwL,GAAA,EAAD,CACE6E,UAAU,SACVpD,SAAS,MACTjE,UAAQ,EACRiD,MAAM,OACNvC,MAAO,CAAEkK,OAAQ,SAEjB,kBAAChI,GAAA,EAAD,+BAEF,kBAACJ,GAAA,EAAD,CAASyB,UAAQ,GACf,kBAAC4G,GAAA,EAAQpI,MAAT,KACGzL,GAAYA,EAASwF,UAAYxF,EAASwF,SAASuF,KAAI,SAACzF,GAAD,OACxD,kBAACuO,GAAA,EAAD,CAASpQ,IAAK6B,EAAQxF,IACtB,kBAAC+T,GAAA,EAAQC,OAAT,CAAgBtK,IAAKlE,EAAQxD,OAAS,qBACtC,kBAAC+R,GAAA,EAAQlI,QAAT,KACE,kBAACkI,GAAA,EAAQE,OAAT,CAAgB3K,GAAIkB,IAAMf,GAAE,mBAAcjE,EAAQ9E,WAAa8E,EAAQzD,aACvE,kBAACgS,GAAA,EAAQG,SAAT,KACE,6BAAMC,aAAe3O,EAAQ4O,UAAW,IAAI5S,QAE9C,kBAACuS,GAAA,EAAQM,KAAT,KAAe7O,EAAQnG,WAKzB,kBAAC,KAAD,CACE0Q,SAAU8D,EACV5D,OAAQ,gBAAEC,EAAF,EAAEA,aAAc9J,EAAhB,EAAgBA,WAAYkO,EAA5B,EAA4BA,KAA5B,OACN,kBAACrF,GAAA,EAAD,CAAMc,SAAU,kBAAMG,IAAgB9Q,MAAK,kBAAMkV,EAAKC,aACtD,kBAAC,KAAD,CACE9N,KAAK,OACL+J,UAAWW,GACXC,KAAM,EACNtC,YAAY,qBAEd,kBAAChF,EAAA,EAAD,CACEpD,QAASN,EACT4D,QAAQ,YACRwK,cAAc,OACd/J,KAAK,OACLgK,SAAO,cCdR5L,gBA1CmC,SAAC,GAAmB,IAAjBnH,EAAgB,EAAhBA,UACnD,OACE,kBAAC,WAAD,KACE,kBAACgK,GAAA,EAAD,CACE6E,UAAU,SACV3G,MAAO,CAAEkK,OAAQ,QACjB3G,SAAS,MACTX,WAAS,EACTtD,UAAQ,EACRiD,MAAM,QAELzK,EAAU4N,OARb,IAQ2C,IAArB5N,EAAU4N,OAAe,SAAW,SAR1D,UAUA,kBAAC5D,GAAA,EAAD,CAASyB,UAAQ,GACf,kBAACpC,GAAA,EAAD,CAAM2J,SAAO,EAAC5H,SAAO,GAClBpL,EAAUuJ,KAAI,SAAA5E,GAAQ,OACrB,kBAAC+C,GAAA,EAAD,CAAMzF,IAAK0C,EAAS3F,SAAUkJ,MAAO,CAAEK,SAAU,aAC9C5D,EAASxE,QACV,kBAACoK,GAAA,EAAD,CACErC,MAAO,CAAEK,SAAU,YACnBkC,MAAM,SACNwI,OAAO,SAHT,QAOA,kBAACzK,EAAA,EAAD,CAAOkB,KAAK,OAAO1B,IAAKrD,EAASrE,OAAS,qBAC1C,kBAACoH,GAAA,EAAKyC,QAAN,CAAc6H,cAAc,UAC1B,kBAACtK,GAAA,EAAK0C,OAAN,CAAaxC,GAAG,MACd,kBAAC,IAAD,CAAMG,GAAE,mBAAcpD,EAAS3F,WAAa2F,EAAStE,cAEtDsE,EAAS+B,WACV,kBAACgB,GAAA,EAAKwL,MAAN,CAAYhL,MAAO,CAAEuC,MAAO,WAA5B,wBCKDtD,gBA/BsD,SAAC,GAG/D,IAFLmJ,EAEI,EAFJA,MACAvT,EACI,EADJA,QACI,EACcqK,qBAAWL,IACgCE,cAArDzI,EAFJ,EAEIA,SAAUiS,EAFd,EAEcA,aAAcrM,EAF5B,EAE4BA,eAMhC,OAJAqI,qBAAU,WACRgE,EAAaH,EAAMlS,OAAOE,MACzB,CAACmS,EAAcH,EAAMlS,OAAOE,GAAIvB,IAE/BqH,EACK,kBAAC,GAAD,CAAkBkE,QAAQ,qBAE9B9J,EAIH,kBAACkO,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAAC,GAAD,CAAwB/M,SAAUA,IAClC,kBAAC,GAAD,CAAsBA,SAAUA,IAChC,kBAAC,GAAD,OAEF,kBAACkO,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAAC,GAAD,CAAyBvL,UAAWxB,EAASwB,cAV5C,kDCVMmT,GAhBE,WACb,OACI,kBAACnJ,GAAA,EAAD,CAASoD,aAAW,GAChB,kBAAChD,GAAA,EAAD,CAAQrB,MAAI,GACR,kBAAC2B,GAAA,EAAD,CAAM3F,KAAK,WADf,oCAIA,kBAACiF,GAAA,EAAQoJ,OAAT,KACI,kBAAChL,EAAA,EAAD,CAAQR,GAAIkB,IAAMf,GAAG,cAAcgL,SAAO,GAA1C,0B,UCKD5L,gBAZQ,WACnB,IADyB,EACPC,qBAAWL,IACuB3B,WAF3B,IAElBS,MAAQF,EAFU,EAEVA,KAAMhI,EAFI,EAEJA,KAAO0H,EAFH,EAEGA,WAC5B,OACI,kBAACgO,GAAA,EAAD,CAAO1N,KAAMA,EAAM2N,QAASjO,EAAYqE,KAAM,QAC9C,kBAAC2J,GAAA,EAAMlJ,QAAP,KACKxM,O,8BCoDEwJ,gBAlDyB,SAAC,GAAyD,IAAxD7H,EAAuD,EAAvDA,QAASiU,EAA8C,EAA9CA,cAAevO,EAA+B,EAA/BA,QAASzF,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SACjF,OACE,kBAACwK,GAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAAC7D,GAAA,EAAKuC,MAAN,KACE,kBAACvC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKc,MAAN,CACEC,QAAM,EACNiB,KAAK,QACL1B,IAAK1I,EAAQgB,OAAS,qBAExB,kBAACoH,GAAA,EAAKyC,QAAN,CAAc6H,cAAc,UAC1B,kBAAC5H,GAAA,EAAD,CAAQxC,GAAG,MAAMtI,EAAQe,iBAKjC,kBAACqM,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACiI,GAAA,EAAUvJ,MAAX,CAAiBmH,OAAQ,GACvB,kBAACoC,GAAA,EAAD,CAAWC,MAAM,YAAYzR,MAAO1C,EAAQqH,iBAC5C,kBAAC6M,GAAA,EAAD,CAAWC,MAAM,YAAYzR,MAAO1C,EAAQoU,kBAE9C,kBAACC,GAAA,EAAD,OACEJ,GACF,kBAACK,GAAA,EAAD,CAAQC,SAAS,QACf,kBAACD,GAAA,EAAOzJ,QAAR,CAAgB2J,SAAO,EAAC5L,MAAO,CAAEqD,MAAO,SACtC,kBAACnD,EAAA,EAAD,CACE2D,OAAK,EACLtB,MAAM,OACNnC,QAAShJ,EAAQoH,UAAY,YAAc,mBAG/C,kBAACkN,GAAA,EAAOzJ,QAAR,CAAgB4J,QAAM,GACpB,kBAAC3L,EAAA,EAAD,CACApD,QAAWA,EACT+G,OAAK,EACLvB,OAAK,EACLC,MAAOnL,EAAQoH,UAAY,MAAQ,QACnC4B,QAAShJ,EAAQoH,UAAY,WAAa,SAC1CsC,QAAS1J,EAAQoH,UAAY,kBAAMlH,EAASF,EAAQN,WAAY,kBAAMO,EAAOD,EAAQN,qB,8BC7C/FgV,GAAiB,CACrB5B,OAAQ,aACRlJ,YAAa,OACb+K,aAAc,MACdC,WAAY,OACZrF,UAAW,SACX8C,OAAQ,SAGJwC,GAAiB,CACrBjL,YAAa,SA6BAkL,GA1B+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzCC,EAASC,uBAAY,SAAAC,GACzBH,EACEG,EAAcjL,KAAI,SAACxL,GAAD,OAChByD,OAAOgO,OAAOzR,EAAM,CAClB0W,QAASC,IAAIC,gBAAgB5W,WAIlC,CAACsW,IAT0D,EAURO,aAAY,CAAEN,WAA5DO,EAVsD,EAUtDA,aAAcC,EAVwC,EAUxCA,cAAeC,EAVyB,EAUzBA,aAErC,OACE,yCACMF,IADN,CAEE3M,MACE6M,EAAY,gBAAQf,GAAR,GAA2BG,IAAmBH,KAG5D,0BAAWc,KACX,kBAACpK,GAAA,EAAD,CAAM3F,KAAK,SAAS2E,KAAK,SACzB,kBAACU,GAAA,EAAD,CAAQ9B,QAAQ,sB,qBCjCT0M,I,OAAuC,SAAC,GAG9C,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,aAEMC,EAAUC,iBAAgB,MAehC,OACE,kBAAC,KAAD,CACE3U,IAAK0U,EACLnN,IAAKkN,EACLhN,MAAO,CAAEyJ,OAAQ,IAAKpG,MAAO,QAE7B8J,YAAa,EACbZ,QAAS,eACTa,QAAQ,EACRC,SAAU,EACVC,SAAS,OACTC,UAAU,EACVC,gBAAgB,EAChBC,kBAAkB,EAClBC,KA3Bc,WAEdT,EAAQvW,SACsC,qBAAvCuW,EAAQvW,QAAQiX,oBAIzBV,GACEA,EAAQvW,SACRuW,EAAQvW,QAAQiX,mBAAmBC,QAAO,SAACC,GACzCd,EAASc,KACR,mBCyCM5O,gBAxD6B,SAAC,GAA4B,IAA3BnC,EAA0B,EAA1BA,QAAS/F,EAAiB,EAAjBA,YAAiB,EAC5CqN,mBAAgB,IAD4B,oBAC/D0J,EAD+D,KACxD3B,EADwD,OAE5C/H,mBAAsB,MAFsB,oBAE/DhM,EAF+D,KAExD2U,EAFwD,KAStE,OALAxI,qBAAU,WACR,OAAO,WACLuJ,EAAMjU,SAAQ,SAAAhE,GAAI,OAAI2W,IAAIuB,gBAAgBlY,EAAK0W,gBAIjD,kBAAC,WAAD,KACE,kBAAC/H,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACnB,GAAA,EAAD,CAAQK,MAAM,OAAOyL,KAAG,EAAC5N,QAAQ,uBACjC,kBAAC,GAAD,CAAqB+L,SAAUA,KAEjC,kBAAC3H,GAAA,EAAKC,OAAN,CAAapB,MAAO,IACpB,kBAACmB,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACnB,GAAA,EAAD,CAAQ8L,KAAG,EAACzL,MAAM,OAAOnC,QAAQ,0BAChC0N,EAAMpI,OAAS,GACd,kBAAC,GAAD,CACEqH,SAAUA,EACVC,aAAcc,EAAM,GAAGvB,WAI7B,kBAAC/H,GAAA,EAAKC,OAAN,CAAapB,MAAO,IACpB,kBAACmB,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAClB,kBAACnB,GAAA,EAAD,CAAQ8L,KAAG,EAACzL,MAAM,OAAOnC,QAAQ,8BAChC0N,EAAMpI,OAAS,GACd,kBAAC,WAAD,KACE,yBACEuB,UAAU,cACVjH,MAAO,CAAE8D,UAAW,QAASmK,SAAU,YAEzC,kBAAC/N,EAAA,EAAO6B,MAAR,CAAcmH,OAAQ,GACpB,kBAAChJ,EAAA,EAAD,CACEC,UAAQ,EACRU,KAAK,QACL/D,QAASA,EACTgE,QAAS,kBAAM/J,EAAYqB,MAE7B,kBAAC8H,EAAA,EAAD,CACEW,KAAK,QACLoD,SAAUnH,EACVgE,QAAS,kBAAMqL,EAAS,eCmC3BlN,gBArFO,WACpB,IAD0B,EACRC,qBAAWL,IASfG,aAPZ5H,EAHwB,EAGxBA,QACAiU,EAJwB,EAIxBA,cACAtU,EALwB,EAKxBA,YACAqH,EANwB,EAMxBA,eACAnH,EAPwB,EAOxBA,aACAC,EARwB,EAQxBA,YACA4F,EATwB,EASxBA,QATwB,EAWcsH,oBAAS,GAXvB,oBAWnB8J,EAXmB,KAWLC,EAXK,OAYE/J,wBAA6B5P,GAZ/B,oBAYnBmI,EAZmB,KAYXyR,EAZW,OAachK,wBACtC5P,GAdwB,oBAanB6Z,EAbmB,KAaLC,EAbK,KAqB1B,OACE,kBAACC,GAAA,EAAIC,KAAL,KACE,kBAAChK,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACnB,GAAA,EAAD,CAAQa,QAAQ,OAAOlC,KAAK,QAAQT,QAAQ,WAC3CiL,GACC,kBAACnL,EAAA,EAAD,CACE6C,QAAQ,QACRT,OAAK,EACLlC,QAAS8N,EAAe,SAAW,YACnCpN,QAAS,kBAAMqN,GAAiBD,OAItC,kBAAC1J,GAAA,EAAKC,OAAN,CAAapB,MAAO,GAAIrD,MAAO,CAAEyO,cAAe,IAC7CP,EACC,kBAAC,GAAD,CACEnX,YArBc,SAACC,GACzBD,EAAYC,GAAOxB,MAAK,kBAAM2Y,GAAgB,OAqBpCrR,QAASsB,IAGX,kBAACsQ,GAAA,EAAK3M,MAAN,CAAY4M,YAAa,GACtBvX,GACCA,EAAQiH,OAAOgD,KAAI,SAAArK,GAAK,OACtB,kBAAC0X,GAAA,EAAD,CAAM3U,IAAK/C,EAAMZ,IACf,kBAACkK,EAAA,EAAD,CAAOR,IAAK9I,EAAM1B,MACjB+V,GACC,kBAACnL,EAAA,EAAO6B,MAAR,CAAc8B,OAAK,EAACqF,OAAQ,GAC1B,kBAAChJ,EAAA,EAAD,CACErD,KAAM7F,EAAMZ,GACZ0K,QAAS,SAAA8G,GACP3Q,EAAaD,GACboX,EAAUxG,EAAEhL,cAAcC,OAE5BoH,SAAUjN,EAAMsH,OAChBxB,QAASA,GAAWH,IAAW3F,EAAMZ,GACrCkM,OAAK,EACLnC,UAAQ,EACRC,QAAQ,SAEV,kBAACF,EAAA,EAAD,CACErD,KAAM7F,EAAMZ,GACZ6N,SAAUjN,EAAMsH,OAChBwC,QAAS,SAAC8G,GACR1Q,EAAYF,GACZsX,EAAgB1G,EAAEhL,cAAcC,OAElCC,QAAWA,GAAWuR,IAAiBrX,EAAMZ,GAC7CkM,OAAK,EACLsM,UAAQ,EACR/N,KAAK,sBCpEzBgF,GAAWC,6BAAkB,CACjC3N,YAAa6N,sBAAW,iBA0CX/G,gBAlC2B,SAAC,GAAgC,IAA9B9H,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAC1D,OACE,kBAAC,KAAD,CACE+O,SAAUhP,EACV0O,SAAUA,GACV8C,cAAevR,EACfiP,OAAQ,gBAAGC,EAAH,EAAGA,aAAcE,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAAUjK,EAApC,EAAoCA,WAApC,OACN,kBAAC6I,GAAA,EAAD,CAAMc,SAAUG,EAAclS,OAAK,GACjC,kBAAC,KAAD,CACEyI,KAAK,cACL+J,UAAW7B,GACXG,YAAY,eACZpL,MAAO1C,EAASe,cAElB,kBAAC,KAAD,CACE0E,KAAK,MACL+J,UAAWW,GACXC,KAAM,EACNtC,YAAY,MACZpL,MAAO1C,EAASyX,MAElB,kBAAC3O,EAAA,EAAD,CACEpD,QAASN,EACTuG,QAAQ,QACRkB,SAAUuC,GAAWC,EACrBtG,UAAQ,EACRC,QAAQ,0BCJLnB,gBAlCY,WACzB,IAD+B,EACbC,qBAAWL,IAC+BG,aAApD7H,EAFuB,EAEvBA,cAAeC,EAFQ,EAERA,QAASiU,EAFD,EAECA,cAFD,EAGCjH,oBAAS,GAHV,oBAGxB0K,EAHwB,KAGdC,EAHc,KAI/B,OACE,kBAACR,GAAA,EAAIC,KAAL,KACE,kBAAChK,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACnB,GAAA,EAAD,CACEa,QAAQ,OACRlC,KAAK,OACLT,QAAO,gBAAWhJ,EAASe,eAE5BkT,GACC,kBAACnL,EAAA,EAAD,CACE6C,QAAQ,QACRT,OAAK,EACLlC,QAAS0O,EAAW,SAAW,eAC/BhO,QAAS,kBAAMiO,GAAaD,OAIlC,kBAACtK,GAAA,EAAKC,OAAN,CAAapB,MAAO,IACjByL,EACC,kBAAC,GAAD,CAAiB3X,cAAeA,EAAeC,QAASA,IAExD,8BAAOA,EAASyX,WCNbG,GAjBuB,SAAC,GAAe,IAAd5X,EAAa,EAAbA,QACtC,OACE,kBAACsX,GAAA,EAAD,CAAMhP,GAAIkB,IAAMf,GAAE,mBAAczI,EAAQN,WACtC,kBAACwJ,EAAA,EAAD,CAAOR,IAAK1I,EAAQgB,OAAS,qBAC7B,kBAACsW,GAAA,EAAKzM,QAAN,KACE,kBAACyM,GAAA,EAAKxM,OAAN,KAAc9K,EAAQe,cAExB,kBAACuW,GAAA,EAAKzM,QAAN,CAAcgN,OAAK,GACjB,6BACE,kBAACzM,GAAA,EAAD,CAAM3F,KAAK,SACVzF,EAAQqH,eAFX,iBCyBOyQ,GArCW,WACxB,IAD8B,EACZhQ,qBAAWL,IAMfG,aAJZ5H,EAH4B,EAG5BA,QACA2G,EAJ4B,EAI5BA,WACAjB,EAL4B,EAK5BA,QACAe,EAN4B,EAM5BA,UAGF,OACE,kBAAC0Q,GAAA,EAAIC,KAAL,CAAU1R,QAASA,GACjB,kBAAC0H,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACnB,GAAA,EAAD,CACEa,QAAQ,OACRlC,KAAK,OACLT,QACgB,IAAdvC,EAAA,2BACwBzG,EAASe,aADjC,iBAEcf,EAASe,YAFvB,oBAMN,kBAACqM,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACqL,GAAA,EAAK3M,MAAN,CAAY4M,YAAa,GACpB5Q,EAAWsD,KAAI,SAACjK,GAAD,OACd,kBAAC,GAAD,CAAa2C,IAAK3C,EAAQN,SAAUM,QAASA,YCvBvD+X,GAAQ,CACZ,CAAEC,SAAU,gBAAiBC,KAAM,CAAEtV,IAAK,iBAC1C,CAAEqV,SAAU,cAAeC,KAAM,CAAEtV,IAAK,eACxC,CAAEqV,SAAU,UAAWC,KAAM,CAAEtV,IAAK,YA2EvBkF,gBAxEO,WACpB,IAD0B,EACRC,qBAAWL,IAMfG,aAJZsQ,EAHwB,EAGxBA,mBACAlY,EAJwB,EAIxBA,QACA4G,EALwB,EAKxBA,kBACAC,EANwB,EAMxBA,eAGFsG,qBAAU,WACR+K,EAAmBlY,EAASN,YAC3B,CAACwY,EAAoBlY,IAqBxB,OACE,kBAACmX,GAAA,EAAIC,KAAL,CAAU1R,QAASkB,GACjB,kBAACwG,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACnB,GAAA,EAAD,CAAQa,QAAQ,OAAOlC,KAAK,WAAWT,QAAS,gBAElD,kBAACoE,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAACkL,GAAA,EAAD,CACEY,MAAOA,GACPI,KAAM,CAAE3M,WAAW,EAAMlC,UAAU,GACnC8O,YAAa,SAAC5H,EAAGhT,GAAJ,OA7BC,SACtBgT,EACAhT,GAEA,IAAI4C,EACJ,OAAQ5C,EAAKsJ,aACX,KAAK,EACH1G,EAAY,OACZ,MACF,KAAK,EACHA,EAAY,UACZ,MACF,QACEA,EAAY,SAGhB8X,EAAmBlY,EAASN,SAAUU,GAaJiY,CAAgB7H,EAAGhT,MAE/C,6BACA,kBAAC8Z,GAAA,EAAK3M,MAAN,CAAY4M,YAAa,GACtB1Q,EAAeoD,KAAI,SAAC/K,GAAD,OAClB,kBAACoY,GAAA,EAAD,CACEhP,GAAIkB,IACJf,GAAE,sBAAiBvJ,EAASF,IAC5B2D,IAAKzD,EAASF,IAEd,kBAACkK,EAAA,EAAD,CACER,IAAG,iCAA4BxJ,EAAS8Q,SAArC,QACHpH,MAAO,CAAE8D,UAAW,IAAK4L,UAAW,WAEtC,kBAAChB,GAAA,EAAKzM,QAAN,KACE,kBAACyM,GAAA,EAAKxM,OAAN,CAAayE,UAAU,UAAUrQ,EAAS6L,OAC1C,kBAACuM,GAAA,EAAKiB,KAAN,CAAWhJ,UAAU,UACnB,6BAAMlE,aAAO,IAAI7K,KAAKtB,EAASqB,MAAO,WACtC,6BAAM8K,aAAO,IAAI7K,KAAKtB,EAASqB,MAAO,wBCnEpDwX,GAAQ,CACZ,CAAEC,SAAU,QAAS/I,OAAQ,kBAAM,kBAAC,GAAD,QACnC,CAAE+I,SAAU,SAAU/I,OAAQ,kBAAM,kBAAC,GAAD,QACpC,CAAE+I,SAAU,aAAc/I,OAAQ,kBAAM,kBAACuJ,GAAD,QACxC,CAAER,SAAU,YAAa/I,OAAQ,kBAAM,kBAAC,GAAD,QACvC,CAAE+I,SAAU,YAAa/I,OAAQ,kBAAM,kBAAC,GAAD,SAkB1BwJ,GAX0B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC1C,OACE,kBAACvB,GAAA,EAAD,CACEgB,KAAM,CAAE1L,OAAO,EAAMT,UAAU,GAC/B2M,aAAa,QACbZ,MAAOA,GACPK,YAAa,SAAC5H,EAAGhT,GAAJ,OAAakb,EAAalb,EAAKsJ,iBCyBnCe,gBAnCuB,SAAC,GAAe,IAAbmJ,EAAY,EAAZA,MAAY,EACjClJ,qBAAWL,IAUfG,aARZb,EAHiD,EAGjDA,eACA/G,EAJiD,EAIjDA,QACA4Y,EALiD,EAKjDA,YACA3Y,EANiD,EAMjDA,OACAC,EAPiD,EAOjDA,SACA+T,EARiD,EAQjDA,cACAvO,EATiD,EASjDA,QACAgT,EAViD,EAUjDA,aAOF,OAJAvL,qBAAU,WACRyL,EAAY5H,EAAMlS,OAAOY,YACxB,CAACkZ,EAAa5H,IAEbjK,EAAuB,kBAAC,GAAD,CAAkBiC,QAAQ,uBAGnD,kBAACoE,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,OAAN,CAAapB,MAAO,IAClB,kBAAC,GAAD,CACEjM,QAASA,EACTiU,cAAeA,EACfvO,QAASA,EACTzF,OAAQA,EACRC,SAAUA,IAEZ,kBAAC,GAAD,CAAgBwY,aAAcA,SCtBvB7Q,gBAbwB,SAAC,GAAqC,IAAzBgR,EAAwB,EAAnCrJ,UAAyBkB,EAAU,8BAEjEf,EADW7H,qBAAWL,IACEvC,UAAxByK,WACP,OACI,kBAAC,IAAD,iBACIe,EADJ,CAEAzB,OAAQ,SAAC6J,GAAD,OAAWnJ,EAAa,kBAACkJ,EAAcC,GAAY,kBAAC,IAAD,CAAUrQ,GAAI,aCoDlEsQ,eAAWlR,aA7CiB,SAAC,GAAkB,IAAhBmR,EAAe,EAAfA,SACtC5X,EAAY0G,qBAAWL,IAD8B,EAElBrG,EAAUwC,YAA5CqV,EAFoD,EAEpDA,aAAcvc,EAFsC,EAEtCA,MAAOwJ,EAF+B,EAE/BA,UACrBgT,EAAW9X,EAAU8D,UAArBgU,QAUP,OARA/L,qBAAU,WACJzQ,EACFwc,IAAU5H,SAAQ,kBAAM2H,OAExBA,MAED,CAACC,EAASD,EAAcvc,IAEtBwJ,EAGH,kBAAC,WAAD,KACE,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAgB+C,SAAS,iBACzB,kBAAC,IAAD,CAAOT,OAAK,EAAC2Q,KAAK,IAAI3J,UAAWE,KACjC,kBAAC,IAAD,CACEyJ,KAAM,QACNlK,OAAQ,kBACN,kBAAC,WAAD,KACE,kBAAC,GAAD,MACA,kBAAC9G,EAAA,EAAD,CAAWS,MAAO,CAAEsD,UAAW,QAC7B,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAc1D,OAAK,EAAC2Q,KAAK,cAAc3J,UAAW4J,KAClD,kBAAC,GAAD,CAAcD,KAAK,kBAAkB3J,UAAW6J,KAChD,kBAAC,GAAD,CACE1W,IAAKqW,EAASrW,IACdwW,KAAM,CAAC,kBAAmB,eAC1B3J,UAAW8J,KAEb,kBAAC,GAAD,CAAcH,KAAK,qBAAqB3J,UAAW+J,KACnD,kBAAC,IAAD,CAAO/J,UAAWqE,YAtBT,kBAAC,GAAD,CAAkB7K,QAAU,uBCvBjCwQ,QACW,cAA7B7c,OAAOqc,SAASS,UAEe,UAA7B9c,OAAOqc,SAASS,UAEhB9c,OAAOqc,SAASS,SAASzI,MACvB,2DCfN,IAQiB+H,gBARG,SAAC,GAA+C,IAA7CW,EAA4C,EAA5CA,SAAsBC,EAAsB,EAAlCX,SAAYW,SAKzC,OAJAxM,qBAAU,WACRxQ,OAAOid,SAAS,EAAG,KAClB,CAACD,IAEGD,GAAY,Q,qBCRvB,yCAYAG,OAEO,IAAMpc,GAAUqc,cAEvBC,IAAS9K,OACP,kBAAC,IAAD,CAAQxR,QAASA,IACf,kBAAC,GAAD,KACE,kBAAC,GAAD,QAGJuc,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhc,MAAK,SAAAic,GACjCA,EAAaC,kB","file":"static/js/main.d209b487.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { IActivity, IActivitiesEnvelope } from \"../models/activity\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\nimport { IProfile, IPhoto } from \"../models/profile\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n  if (error.message === \"Network Error\" && !error.response) {\r\n    toast.error(\"Network error - make sure API is running!\");\r\n  }\r\n  const { status, data, config, headers } = error.response;\r\n  if (status === 404) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if (\r\n    status === 401 &&\r\n    headers[\"www-authenticate\"] ===\r\n      'Bearer error=\"invalid_token\", error_description=\"The token is expired\"'\r\n  ) {\r\n    window.localStorage.removeItem('jwt');\r\n    history.push('/');\r\n    toast.info('Your session has expired, please login again');\r\n  }\r\n  if (\r\n    status === 400 &&\r\n    config.method === \"get\" &&\r\n    data.errors.hasOwnPropert(\"id\")\r\n  ) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if (status === 500) {\r\n    toast.error(\"Server error - check the terminal for more info!\");\r\n  }\r\n  throw error.response;\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\n// const sleep = (ms: number) => (response: AxiosResponse) =>\r\n//   new Promise<AxiosResponse>(resolve =>\r\n//     setTimeout(() => resolve(response), ms)\r\n//   );\r\n\r\nconst requests = {\r\n  get: (url: string) =>\r\n    axios\r\n      .get(url)\r\n      .then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios\r\n      .post(url, body)\r\n      .then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios\r\n      .put(url, body)\r\n      .then(responseBody),\r\n  del: (url: string) =>\r\n    axios\r\n      .delete(url)\r\n      .then(responseBody),\r\n  postForm: (url: string, file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append(\"File\", file);\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { \"Content-type\": \"multipart/form-data\" }\r\n      })\r\n      .then(responseBody);\r\n  }\r\n};\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\r\n    axios\r\n      .get(\"activities\", { params: params })\r\n      .then(responseBody),\r\n  details: (id: string) => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n  update: (activity: IActivity) =>\r\n    requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del(`/activities/${id}`),\r\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`)\r\n};\r\n\r\nconst User = {\r\n  current: (): Promise<IUser> => requests.get(\"/user\"),\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/login`, user),\r\n  register: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/register`, user)\r\n};\r\n\r\nconst Profiles = {\r\n  get: (username: string): Promise<IProfile> =>\r\n    requests.get(`/profiles/${username}`),\r\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\r\n    requests.postForm(`/photos`, photo),\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<IProfile>) =>\r\n    requests.put(`/profiles`, profile),\r\n  follow: (username: string) =>\r\n    requests.post(`/profiles/${username}/follow`, {}),\r\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\r\n  listFollowings: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\r\n  listActivities: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\nexport default {\r\n  Activities,\r\n  User,\r\n  Profiles\r\n};\r\n","import { IActivity, IAttendee } from \"../../models/activity\";\r\nimport { IUser } from \"../../models/user\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n  // const timeString = time.getHours() + \":\" + time.getMinutes() + \":00\";\r\n\r\n  // const year = date.getFullYear();\r\n  // const month = date.getMonth() + 1;\r\n  // const day = date.getDate();\r\n  // const dateString = `${year}-${month}-${day}`;\r\n  const dateString = date.toISOString().split('T')[0];\r\n  const timeString = time.toISOString().split('T')[1];\r\n\r\n  return new Date(dateString + \"T\" + timeString);\r\n};\r\n\r\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\r\n  activity.date = new Date(activity.date);\r\n  activity.isGoing = activity.attendees.some(a => a.username === user.username);\r\n  activity.isHost = activity.attendees.some(\r\n    a => a.username === user.username && a.isHost\r\n  );\r\n  return activity;\r\n};\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.username,\r\n        image: user.image!\r\n    }\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IActivity } from '../models/activity';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { setActivityProps, createAttendee } from '../common/util/util';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from  '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport default class ActivityStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.page = 0;\r\n        this.activityRegistry.clear();\r\n        this.loadActivities();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable activityRegistry = new Map();\r\n  @observable activity: IActivity | null = null;\r\n  @observable loadingInitial = false;\r\n  @observable submitting = false;\r\n  @observable target = '';\r\n  @observable loading = false;\r\n  @observable.ref hubConnection: HubConnection | null = null;\r\n  @observable activityCount = 0;\r\n  @observable page = 0;\r\n  @observable predicate = new Map();\r\n\r\n  @action setPredicate = (predicate: string, value: string | Date) => {\r\n    this.predicate.clear();\r\n    if(predicate !== 'all') {\r\n      this.predicate.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParams(){\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n    this.predicate.forEach((value, key) => {\r\n      if(key ==='startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key,value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPages() {\r\n    return Math.ceil(this.activityCount / LIMIT);\r\n  }\r\n\r\n  @action setPage = (page: number) => {\r\n    this.page = page\r\n  }\r\n\r\n  @action createHubConnection = (activityId: string) => {\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnection\r\n      .start()\r\n      .then(() => console.log(this.hubConnection!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join a group');\r\n        this.hubConnection!.invoke('AddToGroup', activityId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n\r\n    this.hubConnection.on('ReceiveComment', comment => {\r\n      runInAction(() => {\r\n        this.activity!.comments.push(comment)\r\n      })\r\n    })\r\n    this.hubConnection.on('Send', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnection = () => {\r\n    this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\r\n    .then(() => {\r\n      this.hubConnection!.stop()\r\n    })\r\n    .then(() => console.log('Connection stopped'))\r\n    .catch(err => console.log(err))\r\n    \r\n  }\r\n\r\n  @action addComment = async (values: any) => {\r\n    values.activityId = this.activity!.id;\r\n    try {\r\n      await this.hubConnection!.invoke('SendComment', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n  @computed get activitiesByDate() {\r\n    return this.groupActivitiesByDate(\r\n      Array.from(this.activityRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupActivitiesByDate(activities: IActivity[]) {\r\n    const sortedActivities = activities.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedActivities.reduce(\r\n        (activities, activity) => {\r\n          const date = activity.date.toISOString().split('T')[0];\r\n          activities[date] = activities[date]\r\n            ? [...activities[date], activity]\r\n            : [activity];\r\n          return activities;\r\n        },\r\n        {} as { [key: string]: IActivity[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    try {\r\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\r\n      const {activities, activityCount} = activitiesEnvelope;\r\n      runInAction('loading activities', () => {\r\n        activities.forEach(activity => {\r\n          setActivityProps(activity, this.rootStore.userStore.user!);\r\n          this.activityRegistry.set(activity.id, activity);\r\n        });\r\n        this.activityCount = activityCount;\r\n        this.loadingInitial = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction('load activities error', () => {\r\n        this.loadingInitial = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.activity = activity;\r\n      return toJS(activity);\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        runInAction('getting activity', () => {\r\n          setActivityProps(activity, this.rootStore.userStore.user!);\r\n          this.activity = activity;\r\n          this.activityRegistry.set(activity.id, activity);\r\n          this.loadingInitial = false;\r\n        });\r\n        return activity;\r\n      } catch (error) {\r\n        runInAction('get activity error', () => {\r\n          this.loadingInitial = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearActivity = () => {\r\n    this.activity = null;\r\n  };\r\n\r\n  getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  };\r\n\r\n  @action createActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.create(activity);\r\n      const attendee = createAttendee(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      activity.attendees = attendees;\r\n      activity.comments = [];\r\n      activity.isHost = true;\r\n      runInAction('create activity', () => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction('create activity error', () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.update(activity);\r\n      runInAction('editing activity', () => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.activity = activity;\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction('edit activity error', () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteActivity = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submitting = true;\r\n    this.target = event.currentTarget.name;\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction('deleting activity', () => {\r\n        this.activityRegistry.delete(id);\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction('delete activity error', () => {\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action attendActivity = async () => {\r\n    const attendee = createAttendee(this.rootStore.userStore.user!);\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees.push(attendee);\r\n          this.activity.isGoing = true;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      toast.error('Problem signing up to activity');\r\n    }\r\n  };\r\n\r\n  @action cancelAttendance = async () => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.unattend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees = this.activity.attendees.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.activity.isGoing = false;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      toast.error('Problem cancelling attendance');\r\n    }\r\n  };\r\n}\r\n","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\nimport agent from \"../api/agent\";\r\nimport { RootStore } from \"./rootStore\";\r\nimport { history } from \"../..\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable user: IUser | null = null;\r\n\r\n  @computed get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  @action login = async (values: IUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.login(values);\r\n      runInAction(() => {\r\n        this.user = user;\r\n      })\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.rootStore.modalStore.closeModal();\r\n      history.push('/activities')\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n  }\r\n\r\n  @action register = async (values: IUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.register(values);\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.rootStore.modalStore.closeModal();\r\n      history.push('/activities')\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await agent.User.current()\r\n      runInAction(() => {\r\n        this.user = user\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  @action logout = () => {\r\n    this.rootStore.commonStore.setToken(null);\r\n    this.user = null;\r\n    history.push('/')\r\n  }\r\n}\r\n","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore{\r\n    rootStore : RootStore;\r\n    constructor(rootStore:RootStore) {\r\n        this.rootStore = rootStore\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        window.localStorage.setItem('jwt', token!);\r\n        this.token = token;\r\n    }\r\n\r\n    @action setAppLoaded = () => \r\n    {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (conent:any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = conent;\r\n    }\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { RootStore } from './rootStore';\r\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\r\nimport { IProfile, IPhoto, IUserActivity } from '../models/profile';\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class ProfileStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n        () => this.activeTab,\r\n        activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowings(predicate)\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        }\r\n    )\r\n  }\r\n\r\n  @observable profile: IProfile | null = null;\r\n  @observable loadingProfile = true;\r\n  @observable uploadingPhoto = false;\r\n  @observable loading = false;\r\n  @observable followings: IProfile[] = [];\r\n  @observable activeTab: number = 0;\r\n  @observable userActivities: IUserActivity[] = [];\r\n  @observable loadingActivities = false;\r\n\r\n  @computed get isCurrentUser() {\r\n    if (this.rootStore.userStore.user && this.profile) {\r\n      return this.rootStore.userStore.user.username === this.profile.username;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = activities;\r\n        this.loadingActivities = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading activities')\r\n      runInAction(() => {\r\n        this.loadingActivities = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action setActiveTab = (activeIndex: number) => {\r\n      this.activeTab = activeIndex;\r\n  } \r\n\r\n  @action loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProfile = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action uploadPhoto = async (file: Blob) => {\r\n    this.uploadingPhoto = true;\r\n    try {\r\n      const photo = await agent.Profiles.uploadPhoto(file);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos.push(photo);\r\n          if (photo.isMain && this.rootStore.userStore.user) {\r\n            this.rootStore.userStore.user.image = photo.url;\r\n            this.profile.image = photo.url;\r\n          }\r\n        }\r\n        this.uploadingPhoto = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error('Problem uploading photo');\r\n      runInAction(() => {\r\n        this.uploadingPhoto = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action setMainPhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      runInAction(() => {\r\n        this.rootStore.userStore.user!.image = photo.url;\r\n        this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n        this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n        this.profile!.image = photo.url;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem setting photo as main');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action deletePhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        this.profile!.photos = this.profile!.photos.filter(\r\n          a => a.id !== photo.id\r\n        );\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem deleting the photo');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action updateProfile = async (profile: Partial<IProfile>) => {\r\n    try {\r\n      await agent.Profiles.updateProfile(profile);\r\n      runInAction(() => {\r\n        if (\r\n          profile.displayName !== this.rootStore.userStore.user!.displayName\r\n        ) {\r\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\r\n        }\r\n        this.profile = { ...this.profile!, ...profile };\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem updating profile');\r\n    }\r\n  };\r\n\r\n  @action follow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.follow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = true;\r\n        this.profile!.followersCount++;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem following user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action unfollow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.unfollow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = false;\r\n        this.profile!.followersCount--;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem unfollowing user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadFollowings = async (predicate: string) => {\r\n    this.loading = true;\r\n    try {\r\n      const profiles = await agent.Profiles.listFollowings(\r\n        this.profile!.username,\r\n        predicate\r\n      );\r\n      runInAction(() => {\r\n          this.followings = profiles;\r\n          this.loading = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading followings');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n}\r\n","import ActivityStore from './activityStore';\r\nimport UserStore from './userStore';\r\nimport { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore {\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new ActivityStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this)\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from \"react\";\r\nimport { Menu, Container, Button, Dropdown, Image } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst NavBar: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user, logout } = rootStore.userStore;\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={NavLink} exact to=\"/\">\r\n          <img src=\"/assets/logo.jpg\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n          Kaysbook\r\n        </Menu.Item>\r\n        <Menu.Item name=\"Events\" as={NavLink} to=\"/activities\" />\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to=\"/createActivity\"\r\n            positive\r\n            content=\"Create Event\"\r\n          ></Button>\r\n        </Menu.Item>\r\n        {user && (\r\n          <Menu.Item position=\"right\">\r\n            <Image avatar spaced=\"right\" src={user.image || \"/assets/user.png\"} />\r\n            <Dropdown pointing=\"top left\" text={user.displayName}>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  as={Link}\r\n                  to={`/profile/${user.username}`}\r\n                  text=\"My profile\"\r\n                  icon=\"user\"\r\n                />\r\n                <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Menu.Item>\r\n        )}\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default observer(NavBar);","import React from \"react\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { IAttendee } from \"../../../app/models/activity\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst styles = {\r\n  borderColor: 'orange',\r\n  borderWidth: 2\r\n}\r\n\r\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map(attendee => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.displayName}\r\n            trigger={\r\n              <Image\r\n                size='mini'\r\n                circular\r\n                src={attendee.image || '/assets/user.png'}\r\n                bordered\r\n                style={attendee.following? styles : null}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ActivityListItemAttendees;\r\n","import React from \"react\";\r\nimport { Item, Button, Segment, Icon, Label } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\r\n\r\nexport const ActivityListItem: React.FC<{ activity: IActivity }> = ({\r\n  activity\r\n}) => {\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image\r\n              size=\"tiny\"\r\n              circular\r\n              src={host.image || \"/assets/user.png\"}\r\n              style={{ marginBottom: 3 }}\r\n            />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>\r\n                Hosted by\r\n                <Link to={`/profile/${host.username}`}>\r\n                   {host.displayName}\r\n                </Link>\r\n              </Item.Description>\r\n              {activity.isHost && (\r\n                <Item.Description>\r\n                  <Label\r\n                    basic\r\n                    color=\"orange\"\r\n                    content=\"You are hosting this event\"\r\n                  />\r\n                </Item.Description>\r\n              )}\r\n              {activity.isGoing && !activity.isHost && (\r\n                <Item.Description>\r\n                  <Label\r\n                    basic\r\n                    color=\"green\"\r\n                    content=\"You are going to this event\"\r\n                  />\r\n                </Item.Description>\r\n              )}\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <Icon name=\"clock\" /> {format(activity.date, \"h:mm a\")}\r\n        <Icon name=\"marker\" /> {activity.venue}, {activity.city}\r\n      </Segment>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendees attendees={activity.attendees} />\r\n      </Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          floated=\"right\"\r\n          content=\"View\"\r\n          color=\"blue\"\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ActivityListItem } from \"./ActivityListItem\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport {format} from 'date-fns';\r\n\r\nconst ActivityList: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { activitiesByDate } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      {activitiesByDate.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Label size=\"large\" color=\"blue\">\r\n            {format(group, 'eeee do MMMM')}\r\n          </Label>\r\n          <Item.Group divided>\r\n            {activities.map(activity => (\r\n              <ActivityListItem key={activity.id} activity={activity} />\r\n            ))}\r\n          </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicate, setPredicate } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicate.size === 0}\r\n          onClick={() => setPredicate('all', 'true')}\r\n          color={'blue'}\r\n          name={'all'}\r\n          content={'All Events'}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isGoing')}\r\n          onClick={() => setPredicate('isGoing', 'true')}\r\n          color={'blue'}\r\n          name={'username'}\r\n          content={\"I'm Going\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isHost')}\r\n          onClick={() => setPredicate('isHost', 'true')}\r\n          color={'blue'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'teal'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicate('startDate', date!)}\r\n        value={predicate.get('startDate') || new Date()}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityFilters);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst ActivityListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='blue' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Button, Loader } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadActivities,\r\n    loadingInitial,\r\n    setPage,\r\n    page,\r\n    totalPages\r\n  } = rootStore.activityStore;\r\n  const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n  const handleGetNext = () => {\r\n    setLoadingNext(true);\r\n    setPage(page + 1);\r\n    loadActivities().then(() => setLoadingNext(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadActivities();\r\n  }, [loadActivities]);\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        {loadingInitial && page === 0 ? (\r\n          <ActivityListItemPlaceholder />\r\n        ) : (\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNext && page + 1 < totalPages}\r\n            initialLoad={false}\r\n          >\r\n            <ActivityList />\r\n          </InfiniteScroll>\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width={10}>\r\n        <Loader active={loadingNext} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface IProps\r\n  extends FieldRenderProps<string>,\r\n    FormFieldProps {}\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  type,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n      <input {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color=\"red\">\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextInput;","import React from \"react\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n  error: AxiosResponse;\r\n  text?: string;\r\n}\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\r\n  return (\r\n    <Message error>\r\n      <Message.Header>{error.statusText}</Message.Header>\r\n      {error.data && Object.keys(error.data.errors).length > 0 && (\r\n          <Message.List>\r\n              {Object.values(error.data.errors).flat().map((err, i) => (\r\n                  <Message.Item key={i}>{err}</Message.Item>\r\n              ))}\r\n          </Message.List>\r\n      )}\r\n      {text && <Message content={text} />}\r\n    </Message>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { useContext } from \"react\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Form, Button, Header } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { IUserFormValues } from \"../../app/models/user\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { isRequired, combineValidators } from \"revalidate\";\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\n\r\nconst validate = combineValidators({\r\n  email: isRequired(\"email\"),\r\n  password: isRequired(\"password\")\r\n});\r\n\r\nexport const LoginForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        login(values).catch(error => ({\r\n          [FORM_ERROR]: error\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as=\"h2\"\r\n            content=\"Login to Kaysbook\"\r\n            color=\"teal\"\r\n            textAlign=\"center\"\r\n          />\r\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\r\n          <Field\r\n            name=\"password\"\r\n            component={TextInput}\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage\r\n              error={submitError}\r\n              text=\"Invalid email or password\"\r\n            />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color=\"teal\"\r\n            content=\"Login\"\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Form, Button, Header } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { IUserFormValues } from \"../../app/models/user\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { isRequired, combineValidators } from \"revalidate\";\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\n\r\nconst validate = combineValidators({\r\n  username: isRequired(\"username\"),\r\n  displayName: isRequired(\"display name\"),\r\n  email: isRequired(\"email\"),\r\n  password: isRequired(\"password\")\r\n});\r\n\r\nexport const RegisterForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { register } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        register(values).catch(error => ({\r\n          [FORM_ERROR]: error\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as=\"h2\"\r\n            content=\"Sign up to Kaysbook\"\r\n            color=\"teal\"\r\n            textAlign=\"center\"\r\n          />\r\n          <Field name=\"username\" component={TextInput} placeholder=\"Username\" />\r\n          <Field\r\n            name=\"displayName\"\r\n            component={TextInput}\r\n            placeholder=\"Display Name\"\r\n          />\r\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\r\n          <Field\r\n            name=\"password\"\r\n            component={TextInput}\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage\r\n              error={submitError}\r\n            />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color=\"teal\"\r\n            content=\"Register\"\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { Container, Segment, Header, Button, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { LoginForm } from \"../user/LoginForm\";\r\nimport { RegisterForm } from \"../user/RegisterForm\";\r\n\r\nexport const HomePage = () => {\r\n  const token = window.localStorage.getItem('jwt');\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { isLoggedIn, user } = rootStore.userStore;\r\n  const {openModal} = rootStore.modalStore\r\n  return (\r\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n      <Container text>\r\n        <Header as=\"h1\" inverted>\r\n          <Image\r\n            size=\"massive\"\r\n            src=\"/assets/logo.jpg\"\r\n            alt=\"logo\"\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n          Kaysbook\r\n        </Header>\r\n        {isLoggedIn && user && token ? (\r\n          <Fragment>\r\n            <Header\r\n              as=\"h2\"\r\n              inverted\r\n              content={`Welcome back ${user.displayName}`}\r\n            />\r\n            <Button as={Link} to='/activities' size=\"huge\" inverted>\r\n              Take me there!!\r\n            </Button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <Header as=\"h2\" inverted content=\"Welcome to Kaysbook\" />\r\n            <Button onClick={() => openModal(<LoginForm/>)} size=\"huge\" inverted>\r\n              Login\r\n            </Button>\r\n            <Button onClick={() => openModal(<RegisterForm/>)} to=\"/register\" size=\"huge\" inverted>\r\n              Register\r\n            </Button>\r\n          </Fragment>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  );\r\n};\r\n","export interface IActivitiesEnvelope {\r\n  activities: IActivity[];\r\n  activityCount: number;\r\n}\r\n\r\nexport interface IActivity {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  date: Date;\r\n  city: string;\r\n  venue: string;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  attendees: IAttendee[];\r\n  comments: IComments[];\r\n}\r\n\r\nexport interface IComments {\r\n  id: string;\r\n  createdAt: Date;\r\n  body: string;\r\n  username: string;\r\n  displayName: string;\r\n  image: string;\r\n}\r\n\r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n  time?: Date;\r\n}\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = \"\";\r\n  category: string = \"\";\r\n  description: string = \"\";\r\n  date?: Date = undefined;\r\n  time?: Date = undefined;\r\n  city: string = \"\";\r\n  venue: string = \"\";\r\n\r\n  constructor(init?: IActivityFormValues){\r\n      if (init && init.date){\r\n          init.time = init.date\r\n      }\r\n      Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport interface IAttendee {\r\n  username: string;\r\n  displayName: string;\r\n  image: string;\r\n  isHost: boolean;\r\n  following?: boolean;\r\n}","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string>, FormFieldProps {}\r\n\r\nexport const TextAreaInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  placeholder,\r\n  meta: { touched, error }\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <textarea rows={rows} {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color=\"red\">\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string>, FormFieldProps {}\r\n\r\nexport const SelectInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    options,\r\n    placeholder,\r\n    meta: { touched, error }\r\n  }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <Select \r\n            value={input.value}\r\n            onChange={(e, data) => input.onChange(data.value)}\r\n            placeholder = {placeholder}\r\n            options = {options}\r\n        />\r\n        {touched && error && (\r\n          <Label basic color=\"red\">\r\n            {error}\r\n          </Label>\r\n        )}\r\n      </Form.Field>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\nimport {DateTimePicker} from 'react-widgets';\r\n\r\ninterface IProps\r\n  extends FieldRenderProps<Date>,\r\n    FormFieldProps {}\r\n\r\nexport const DateInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    id = null,\r\n    placeholder,\r\n    date = false,\r\n    time = false,\r\n    meta: { touched, error },\r\n    ...rest\r\n  }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <DateTimePicker \r\n        placeholder = {placeholder}\r\n        value={input.value || null}\r\n        onChange={input.onChange}\r\n        onBlur={input.onBlur}\r\n        onKeyDown={(e)=>e.preventDefault()}\r\n        date = {date}\r\n        time = {time}\r\n        {...rest}\r\n        />\r\n        {touched && error && (\r\n          <Label basic color=\"red\">\r\n            {error}\r\n          </Label>\r\n        )}\r\n      </Form.Field>\r\n    )\r\n}\r\n","export const category = [\r\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n  { key: 'culture', text: 'Culture', value: 'culture' },\r\n  { key: 'film', text: 'Film', value: 'film' },\r\n  { key: 'food', text: 'Food', value: 'food' },\r\n  { key: 'music', text: 'Music', value: 'music' },\r\n  { key: 'travel', text: 'Travel', value: 'travel' }\r\n];","import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport {TextAreaInput} from '../../../app/common/form/TextAreaInput';\nimport {SelectInput} from '../../../app/common/form/SelectInput';\nimport {DateInput} from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport {\n  combineValidators,\n  isRequired,\n  composeValidators,\n  hasLengthGreaterThan\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters'\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then(activity => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name='category'\n                  placeholder='Category'\n                  value={activity.category}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  component={TextInput}\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nexport const LoadingComponent: React.FC<{inverted?: boolean, content?: string}> = ({\r\n    inverted = true,\r\n    content\r\n    }) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { Segment, Item, Header, Button, Image } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst activityImageStyle = {\r\n  filter: \"brightness(30%)\"\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: \"absolute\",\r\n  bottom: \"5%\",\r\n  left: \"5%\",\r\n  width: \"100%\",\r\n  height: \"auto\",\r\n  color: \"white\"\r\n};\r\n\r\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\r\n  activity\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n        <Image\r\n          src={`/assets/categoryImages/${activity.category}.jpg`}\r\n          fluid\r\n          style={activityImageStyle}\r\n        />\r\n        <Segment basic style={activityImageTextStyle}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size=\"huge\"\r\n                  content={activity.title}\r\n                  style={{ color: \"white\" }}\r\n                />\r\n                <p>{format(activity.date, \"eeee do MMMM\")}</p>\r\n                <p>\r\n                  Hosted by{\" \"}\r\n                  <Link to={`/profile/${host.username}`}>\r\n                    <strong>{host.displayName}</strong>\r\n                  </Link>\r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached=\"bottom\">\r\n        {activity.isHost ? (\r\n          <Button\r\n            as={Link}\r\n            to={`/manage/${activity.id}`}\r\n            color=\"orange\"\r\n            floated=\"right\"\r\n          >\r\n            Manage Event\r\n          </Button>\r\n        ) : activity.isGoing ? (\r\n          <Button loading={loading} onClick={cancelAttendance}>\r\n            Cancel attendance\r\n          </Button>\r\n        ) : (\r\n          <Button loading={loading} onClick={attendActivity} color=\"teal\">\r\n            Join Event\r\n          </Button>\r\n        )}\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity'\r\nimport {format} from 'date-fns';\r\n\r\nexport const ActivityDetailedInfo: React.FC<{activity:IActivity}> = ({activity}) => {\r\n    return (\r\n        <Segment.Group>\r\n              <Segment attached='top'>\r\n                <Grid>\r\n                  <Grid.Column width={1}>\r\n                    <Icon size='large' color='teal' name='info' />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={15}>\r\n                    <p>{activity.description}</p>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Segment>\r\n              <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                  <Grid.Column width={1}>\r\n                    <Icon name='calendar' size='large' color='teal' />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={15}>\r\n                    <span>\r\n                      {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}\r\n                    </span>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Segment>\r\n              <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                  <Grid.Column width={1}>\r\n                    <Icon name='marker' size='large' color='teal' />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={11}>\r\n                    <span>{activity.venue}, {activity.city}</span>\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Segment>\r\n            </Segment.Group>\r\n    )\r\n}","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport {TextAreaInput} from '../../../app/common/form/TextAreaInput';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {formatDistance} from 'date-fns';\r\n\r\nconst ActivityDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnection,\r\n    stopHubConnection,\r\n    addComment,\r\n    activity\r\n  } = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnection(activity!.id);\r\n    return () => {\r\n      stopHubConnection();\r\n    }\r\n  }, [createHubConnection, stopHubConnection, activity])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        color='teal'\r\n        style={{ border: 'none' }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {activity && activity.comments && activity.comments.map((comment) => (\r\n          <Comment key={comment.id}>\r\n          <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n          <Comment.Content>\r\n            <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n            <Comment.Metadata>\r\n              <div>{formatDistance(comment.createdAt, new Date())}</div>\r\n            </Comment.Metadata>\r\n            <Comment.Text>{comment.body}</Comment.Text>\r\n          </Comment.Content>\r\n        </Comment>\r\n          ))}\r\n\r\n          <FinalForm \r\n            onSubmit={addComment}\r\n            render={({handleSubmit, submitting, form}) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n              <Field \r\n                name='body'\r\n                component={TextAreaInput}\r\n                rows={2}\r\n                placeholder='Add your comment'\r\n              />\r\n              <Button\r\n                loading={submitting}\r\n                content='Add Reply'\r\n                labelPosition='left'\r\n                icon='edit'\r\n                primary\r\n              />\r\n            </Form>\r\n            )}\r\n          />\r\n\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import React, { Fragment } from \"react\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IAttendee } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"teal\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map(attendee => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost &&\r\n              <Label\r\n                style={{ position: \"absolute\" }}\r\n                color=\"orange\"\r\n                ribbon=\"right\"\r\n              >\r\n                Host\r\n              </Label>}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                {attendee.following &&\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>}\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);","import React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport { ActivityDetailedInfo } from \"./ActivityDetailedInfo\";\r\nimport  ActivityDetailedChat  from \"./ActivityDetailedChat\";\r\nimport  ActivityDetailedSidebar  from \"./ActivityDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    loadActivity(match.params.id);\r\n  }, [loadActivity, match.params.id, history]);\r\n\r\n  if (loadingInitial)\r\n    return <LoadingComponent content=\"Loading stuff...\" />;\r\n\r\n  if (!activity)\r\n  return <h2>Event not found</h2>\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity}/>\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar attendees={activity.attendees}/>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n\r\n  /* <Card fluid>\r\n      <Image\r\n        src={`/assets/categoryImages/${activity!.category}.jpg`}\r\n        wrapped\r\n        ui={false}\r\n      />\r\n      <Card.Content>\r\n        <Card.Header>{activity!.title}</Card.Header>\r\n        <Card.Meta>\r\n          <span> {activity!.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{activity!.description}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group widths={2}>\r\n          <Button\r\n            as={Link} to={`/manage/${activity.id}`}\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n          />\r\n          <Button\r\n            onClick={() => history.push('/activities')}\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card> */\r\n\r\n","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - looks like you're lost :O\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to main page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../stores/rootStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size ='mini'>\r\n        <Modal.Content>  \r\n            {body}  \r\n        </Modal.Content>\r\n      </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer);","import React from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { IProfile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    profile: IProfile,\r\n    isCurrentUser: boolean,\r\n    loading: boolean,\r\n    follow: (username: string) => void;\r\n    unfollow: (username: string) => void;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({profile, isCurrentUser, loading, follow, unfollow}) => {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image\r\n                avatar\r\n                size='small'\r\n                src={profile.image || '/assets/user.png'}\r\n              />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1'>{profile.displayName}</Header>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value={profile.followersCount}/>\r\n            <Statistic label='Following' value={profile.followingCount}/>\r\n          </Statistic.Group>\r\n          <Divider/>\r\n          {!isCurrentUser &&\r\n          <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n              <Button\r\n                fluid\r\n                color='teal'\r\n                content={profile.following ? 'Following' : 'Not following'}\r\n              />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden>\r\n              <Button\r\n              loading = {loading}\r\n                fluid\r\n                basic\r\n                color={profile.following ? 'red' : 'green'}\r\n                content={profile.following ? 'Unfollow' : 'Follow'}\r\n                onClick={profile.following ? () => unfollow(profile.username) : () => follow(profile.username)}\r\n              />\r\n            </Reveal.Content>\r\n          </Reveal>}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n  border: 'dashed 3px',\r\n  borderColor: '#eee',\r\n  borderRadius: '5px',\r\n  paddingTop: '30px',\r\n  textAlign: 'center' as 'center',\r\n  height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n  borderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(\r\n      acceptedFiles.map((file: object) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })\r\n      )\r\n    );\r\n  }, [setFiles]);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={\r\n        isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n      }\r\n    >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useRef } from \"react\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface IProps {\r\n  setImage: (file: Blob) => void;\r\n  imagePreview: string;\r\n}\r\n\r\nexport const PhotoWidgetCropper: React.FC<IProps> = ({\r\n  setImage,\r\n  imagePreview\r\n}) => {\r\n  const cropper = useRef<Cropper>(null);\r\n\r\n  const cropImage = () => {\r\n    if (\r\n      cropper.current &&\r\n      typeof cropper.current.getCroppedCanvas() === \"undefined\"\r\n    ) {\r\n      return;\r\n    }\r\n    cropper &&\r\n      cropper.current &&\r\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n        setImage(blob);\r\n      }, \"image/jpeg\");\r\n  };\r\n  return (\r\n    <Cropper\r\n      ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: \"100%\" }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview= '.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode=\"move\"\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n    />\r\n  );\r\n};\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Header, Grid, Button } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport { PhotoWidgetCropper } from \"./PhotoWidgerCropper\";\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n  uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<IProps> = ({loading, uploadPhoto}) => {\r\n  const [files, setFiles] = useState<any[]>([]);\r\n  const [image, setImage] = useState<Blob | null>(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    };\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Header color=\"teal\" sub content=\"Step 1 - Add Photo\" />\r\n          <PhotoWidgetDropzone setFiles={setFiles} />\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color=\"teal\" content=\"Step 2 - Resize image\" />\r\n          {files.length > 0 && (\r\n            <PhotoWidgetCropper\r\n              setImage={setImage}\r\n              imagePreview={files[0].preview}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color=\"teal\" content=\"Step 3 - Preview & Upload\" />\r\n          {files.length > 0 && (\r\n            <Fragment>\r\n              <div\r\n                className=\"img-preview\"\r\n                style={{ minHeight: \"200px\", overflow: \"hidden\" }}\r\n              />\r\n              <Button.Group widths={2}>\r\n                <Button\r\n                  positive\r\n                  icon=\"check\"\r\n                  loading={loading}\r\n                  onClick={() => uploadPhoto(image!)}\r\n                />\r\n                <Button\r\n                  icon=\"close\"\r\n                  disabled={loading}\r\n                  onClick={() => setFiles([])}\r\n                />\r\n              </Button.Group>\r\n            </Fragment>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Tab, Header, Card, Image, Button, Grid } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst ProfilePhotos = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    isCurrentUser,\r\n    uploadPhoto,\r\n    uploadingPhoto,\r\n    setMainPhoto,\r\n    deletePhoto,\r\n    loading\r\n  } = rootStore.profileStore;\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState<string | undefined>(undefined);\r\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const handleUploadImage = (photo: Blob) => {\r\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handleUploadImage}\r\n              loading={uploadingPhoto}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile &&\r\n                profile.photos.map(photo => (\r\n                  <Card key={photo.id}>\r\n                    <Image src={photo.url} />\r\n                    {isCurrentUser && (\r\n                      <Button.Group fluid widths={2}>\r\n                        <Button\r\n                          name={photo.id}\r\n                          onClick={e => {\r\n                            setMainPhoto(photo);\r\n                            setTarget(e.currentTarget.name);\r\n                          }}\r\n                          disabled={photo.isMain}\r\n                          loading={loading && target === photo.id}\r\n                          basic\r\n                          positive\r\n                          content=\"Main\"\r\n                        />\r\n                        <Button\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          onClick={(e) => {\r\n                            deletePhoto(photo);\r\n                            setDeleteTarget(e.currentTarget.name)\r\n                          }}\r\n                          loading = {loading && deleteTarget === photo.id}\r\n                          basic\r\n                          negative\r\n                          icon=\"trash\"\r\n                        />\r\n                      </Button.Group>\r\n                    )}\r\n                  </Card>\r\n                ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from 'react';\r\nimport { IProfile } from '../../app/models/profile';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport {TextAreaInput} from '../../app/common/form/TextAreaInput';\r\n\r\nconst validate = combineValidators({\r\n  displayName: isRequired('displayName')\r\n});\r\n\r\ninterface IProps {\r\n  updateProfile: (profile: Partial<IProfile>) => void;\r\n  profile: IProfile;\r\n}\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\r\n  return (\r\n    <FinalForm\r\n      onSubmit={updateProfile}\r\n      validate={validate}\r\n      initialValues={profile!}\r\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Field\r\n            name='displayName'\r\n            component={TextInput}\r\n            placeholder='Display Name'\r\n            value={profile!.displayName}\r\n          />\r\n          <Field\r\n            name='bio'\r\n            component={TextAreaInput}\r\n            rows={3}\r\n            placeholder='Bio'\r\n            value={profile!.bio}\r\n          />\r\n          <Button \r\n            loading={submitting}\r\n            floated='right'\r\n            disabled={invalid || pristine}\r\n            positive\r\n            content='Update profile'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEditForm);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfileDescription = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\r\n  const [editMode, setEditMode] = useState(false);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={`About ${profile!.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {editMode ? (\r\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\r\n          ) : (\r\n            <span>{profile!.bio}</span>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileDescription);\r\n","import React from 'react';\r\nimport { Card, Image, Icon} from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../app/models/profile';\r\n\r\ninterface IProps {\r\n    profile:IProfile\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\r\n  return (\r\n    <Card as={Link} to={`/profile/${profile.username}`}>\r\n      <Image src={profile.image || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div>\r\n          <Icon name='user' />\r\n          {profile.followersCount} followers\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileCard;\r\n","import React, { useContext } from \"react\";\r\nimport { Tab, Grid, Header, Card } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nconst ProfileFollowings = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    followings,\r\n    loading,\r\n    activeTab\r\n  } = rootStore.profileStore;\r\n\r\n  return (\r\n    <Tab.Pane loading={loading}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated=\"left\"\r\n            icon=\"user\"\r\n            content={\r\n              activeTab === 3\r\n                ? `People following ${profile!.displayName}`\r\n                : `People ${profile!.displayName} is following`\r\n            }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={5}>\r\n              {followings.map((profile) => (\r\n                <ProfileCard key={profile.username} profile={profile} />\r\n              ))}\r\n            \r\n            \r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default ProfileFollowings;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserActivities,\r\n    profile,\r\n    loadingActivities,\r\n    userActivities\r\n  } = rootStore.profileStore!;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    loadUserActivities(profile!.username, predicate);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: IUserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEvents);\r\n","import React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileDescription from \"./ProfileDescription\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\nconst panes = [\r\n  { menuItem: \"About\", render: () => <ProfileDescription /> },\r\n  { menuItem: \"Photos\", render: () => <ProfilePhotos /> },\r\n  { menuItem: \"Activities\", render: () => <ProfileActivities />},\r\n  { menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n  { menuItem: \"Following\", render: () => <ProfileFollowings /> }\r\n];\r\n\r\ninterface IProps {\r\n  setActiveTab: (activeIndex: any) => void;\r\n}\r\n\r\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition=\"right\"\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfileContent;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { LoadingComponent } from \"../../app/layout/LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface RouteParams {\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadingProfile,\r\n    profile,\r\n    loadProfile,\r\n    follow,\r\n    unfollow,\r\n    isCurrentUser,\r\n    loading,\r\n    setActiveTab\r\n  } = rootStore.profileStore;\r\n\r\n  useEffect(() => {\r\n    loadProfile(match.params.username);\r\n  }, [loadProfile, match]);\r\n\r\n  if (loadingProfile) return <LoadingComponent content=\"Loading profile...\" />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <ProfileHeader\r\n          profile={profile!}\r\n          isCurrentUser={isCurrentUser}\r\n          loading={loading}\r\n          follow={follow}\r\n          unfollow={unfollow}\r\n        />\r\n        <ProfileContent setActiveTab={setActiveTab} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePage);\r\n","import React, { useContext } from 'react'\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom'\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn} = rootStore.userStore;\r\n    return (\r\n        <Route\r\n        {...rest} \r\n        render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\r\n        />\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default observer(PrivateRoute);","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"../../features/nav/NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  Route,\r\n  RouteComponentProps,\r\n  withRouter,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport { HomePage } from \"../../features/home/HomePage\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\r\nimport NotFound from \"./NotFound\";\r\nimport {ToastContainer} from 'react-toastify';\r\nimport { RootStoreContext } from \"../stores/rootStore\";\r\nimport { LoadingComponent } from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport  ProfilePage  from \"../../features/profiles/ProfilePage\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\r\n  const {getUser} = rootStore.userStore;\r\n  \r\n  useEffect(() => {\r\n    if (token) {\r\n      getUser().finally(() => setAppLoaded())\r\n    } else {\r\n      setAppLoaded()\r\n    }\r\n  }, [getUser, setAppLoaded, token])\r\n\r\n  if (!appLoaded) return <LoadingComponent content = 'Loading app...'/>\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalContainer/>\r\n      <ToastContainer position='bottom-right'/>\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route\r\n        path={\"/(.+)\"}\r\n        render={() => (\r\n          <Fragment>\r\n            <NavBar />\r\n            <Container style={{ marginTop: \"7em\" }}>\r\n              <Switch>\r\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\r\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\r\n                <PrivateRoute\r\n                  key={location.key}\r\n                  path={[\"/createActivity\", \"/manage/:id\"]}\r\n                  component={ActivityForm}\r\n                />\r\n                <PrivateRoute path='/profile/:username' component={ProfilePage} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </Fragment>\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(observer(App));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {useEffect} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\r\n    useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n  \r\n    return children || null;\r\n  };\r\n  \r\n  export default withRouter(ScrollToTop);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Router } from \"react-router-dom\";\r\nimport {createBrowserHistory} from 'history';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport \"./app/layout/styles.css\";\r\nimport App from \"./app/layout/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\r\nimport dateFnsLocalizer from 'react-widgets-date-fns';\r\n\r\ndateFnsLocalizer();\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <ScrollToTop>\r\n      <App />\r\n    </ScrollToTop>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}